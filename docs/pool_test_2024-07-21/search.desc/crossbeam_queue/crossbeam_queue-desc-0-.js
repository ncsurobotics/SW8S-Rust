searchState.loadedDescShard("crossbeam_queue", 0, "Concurrent queues.\nA bounded multi-producer multi-consumer queue.\nAn unbounded multi-producer multi-consumer queue.\nIndicates that dropping a <code>SegQueue&lt;T&gt;</code> may drop values of …\nThe implementation is based on Dmitry Vyukov’s bounded …\nThe buffer holding slots.\nThe queue capacity.\nThe head of the queue.\nThe head of the queue.\nA stamp with the value of <code>{ lap: 1, index: 0 }</code>.\nThe tail of the queue.\nThe tail of the queue.\nA bounded multi-producer multi-consumer queue.\nA slot in a queue.\nThe buffer holding slots.\nThe queue capacity.\nReturns the capacity of the queue.\nPushes an element into the queue, replacing the oldest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe head of the queue.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is full.\nReturns the number of elements in the queue.\nCreates a new bounded queue with the given capacity.\nA stamp with the value of <code>{ lap: 1, index: 0 }</code>.\nAttempts to pop an element from the queue.\nAttempts to push an element into the queue.\nThe current stamp.\nThe tail of the queue.\nThe value in this slot.\nA block in a linked list.\nA position in a queue.\nAn unbounded multi-producer multi-consumer queue.\nA slot in a block.\nIndicates that dropping a <code>SegQueue&lt;T&gt;</code> may drop values of …\nThe block in the linked list.\nSets the <code>DESTROY</code> bit in slots starting from <code>start</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe head of the queue.\nThe index in the queue.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns the number of elements in the queue.\nCreates an empty block that starts at <code>start_index</code>.\nCreates a new unbounded queue.\nThe next block in the linked list.\nPops an element from the queue.\nPushes an element into the queue.\nSlots for values.\nThe state of the slot.\nThe tail of the queue.\nThe value.\nWaits until the next pointer is set.\nWaits until a value is written into the slot.")