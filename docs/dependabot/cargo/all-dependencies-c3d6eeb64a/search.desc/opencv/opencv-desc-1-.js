searchState.loadedDescShard("opencv", 1, "Mutable methods for core::FileNode\nConstant methods for core::FileNode\nempty structure (sequence or mapping)\nsynonym or REAL\ncompact representation of a sequence or mapping. Used only …\nan integer\nmapping\nthe node has a name (i.e. it is element of a mapping).\nempty node\nfloating-point number\nsequence\ntext string in UTF-8 encoding\nsynonym for STR\nif set, means that all the collection elements are numbers …\nXML/YAML/JSON file storage class that encapsulates all the …\nMutable methods for core::FileStorage\nConstant methods for core::FileStorage\nvalue, open the file for appending\nflag, write rawdata in Base64 by default. (consider using …\nflag, auto format\nflag, JSON format\nmask for format flags\nflag, XML format\nflag, YAML format\nflag, read data from source or write data to the internal …\nfile storage mode\nvalue, open the file for reading\nvalue, open the file for writing\nflag, enable both WRITE and BASE64\n@todo document\nMutable methods for core::Formatted\nConstant methods for core::Formatted\n@todo document\nMutable methods for core::Formatter\nConstant methods for core::Formatter\ntransposes src1\ntransposes src1\ntransposes src2\ntransposes src2\ntransposes src3\ntransposes src3\ngeneralized matrix multiplication flags\nGPU API call error\nGPU API call error\nMutable methods for core::GpuData\nConstant methods for core::GpuData\nBase storage class for GPU memory with reference counting.\nMutable methods for core::GpuMatND\nConstant methods for core::GpuMatND\nMutable methods for core::GpuMat\nConstant methods for core::GpuMat\nMutable methods for core::GpuMat_Allocator\nConstant methods for core::GpuMat_Allocator\nno CUDA support\nno CUDA support\nMutable methods for core::Hamming\nConstant methods for core::Hamming\nimage header is NULL\nimage header is NULL\nClass with reference counting wrapping special memory type …\nMutable methods for core::HostMem\nConstant methods for core::HostMem\n&lt; Event is suitable for interprocess use. DisableTiming …\nMutable methods for core::Image2D\nConstant methods for core::Image2D\nUse kmeans++ center initialization by Arthur and …\nUse kmeans++ center initialization by Arthur and …\nSelect random initial centers in each attempt.\nSelect random initial centers in each attempt.\nDuring the first (and possibly the only) attempt, use the …\nDuring the first (and possibly the only) attempt, use the …\nMutable methods for core::KernelArg\nConstant methods for core::KernelArg\nMutable methods for core::Kernel\nConstant methods for core::Kernel\nData structure for salient point detectors.\nMutable methods for core::KeyPoint\nConstant methods for core::KeyPoint\nk-Means flags\nLinear Discriminant Analysis @todo document this class\nMutable methods for core::LDA\nConstant methods for core::LDA\nDebug message. Disabled in the “Release” build.\nDebug message. Disabled in the “Release” build.\nError message\nError message\nFatal (critical) error (unrecoverable internal error)\nFatal (critical) error (unrecoverable internal error)\nInfo message\nInfo message\nfor using in setLogVevel() call\nfor using in setLogVevel() call\nVerbose (trace) messages. Requires verbosity level. …\nVerbose (trace) messages. Requires verbosity level. …\nWarning message\nWarning message\nSupported logging levels and their semantic\nMutable methods for core::LogTag\nConstant methods for core::LogTag\nflag, read data from source or write data to the internal …\nallow the algorithm to modify the decomposed matrix; it …\nn-dimensional dense array class \\anchor CVMat_Details\n/////////////////////////////// MatConstIterator …\nMutable methods for core::MatConstIterator\nConstant methods for core::MatConstIterator\nMatrix expression representation @anchor MatrixExpressions …\nMutable methods for core::MatExpr\nConstant methods for core::MatExpr\n////////////////////////////// Matrix Expressions …\nMutable methods for core::MatOp\nConstant methods for core::MatOp\nMutable methods for core::MatSize\nConstant methods for core::MatSize\nMutable methods for core::MatStep\nConstant methods for core::MatStep\nMutable methods for core::Mat\nConstant methods for core::Mat\n@cond IGNORED\nMutable methods for core::Matx_AddOp\nConstant methods for core::Matx_AddOp\nMutable methods for core::Matx_DivOp\nConstant methods for core::Matx_DivOp\nMutable methods for core::Matx_MatMulOp\nConstant methods for core::Matx_MatMulOp\nMutable methods for core::Matx_MulOp\nConstant methods for core::Matx_MulOp\nMutable methods for core::Matx_ScaleOp\nConstant methods for core::Matx_ScaleOp\nMutable methods for core::Matx_SubOp\nConstant methods for core::Matx_SubOp\nMutable methods for core::Matx_TOp\nConstant methods for core::Matx_TOp\nBasic interface for all solvers\nMutable methods for core::MinProblemSolver\nConstant methods for core::MinProblemSolver\nRepresents function being optimized\nMutable methods for core::MinProblemSolver_Function\nConstant methods for core::MinProblemSolver_Function\nstruct returned by cv::moments\nIn the case of one input array, calculates the Hamming …\nIn the case of one input array, calculates the Hamming …\nSimilar to NORM_HAMMING, but in the calculation, each two …\nSimilar to NORM_HAMMING, but in the calculation, each two …\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nflag\nflag\nflag\nflag\nbit-mask which can be used to separate norm type from norm …\nindicates that only a vector of singular values <code>w</code> is to be …\nMutable methods for core::NodeData\nConstant methods for core::NodeData\nNo value.\nnorm types\nOpenCL API call error\nOpenCL API call error\nMutable methods for core::OpenCLExecutionContext\nConstant methods for core::OpenCLExecutionContext\nOpenCL initialization error\nOpenCL initialization error\nOpenGL API call error\nOpenGL API call error\nno OpenGL support\nno OpenGL support\nPrincipal Component Analysis\nMutable methods for core::PCA\nConstant methods for core::PCA\nindicates that the input samples are stored as matrix …\nindicates that the input samples are stored as matrix rows\nThe buffer will be used for reading from OpenGL textures\nThe buffer will be used for writing to OpenGL textures\nBase class for parallel data processors\nMutable methods for core::ParallelLoopBody\nConstant methods for core::ParallelLoopBody\n@deprecated\nMutable methods for core::PlatformInfo\nConstant methods for core::PlatformInfo\nMutable methods for core::Platform\nConstant methods for core::Platform\nMutable methods for core::ProgramSource\nConstant methods for core::ProgramSource\nMutable methods for core::Program\nConstant methods for core::Program\nMutable methods for core::Queue\nConstant methods for core::Queue\nvalue, open the file for reading\nthe output is the mean vector of all rows/columns of the …\nthe output is the mean vector of all rows/columns of the …\nthe output is the maximum (column/row-wise) of all …\nthe output is the maximum (column/row-wise) of all …\nthe output is the minimum (column/row-wise) of all …\nthe output is the minimum (column/row-wise) of all …\nthe output is the sum of all rows/columns of the matrix.\nthe output is the sum of all rows/columns of the matrix.\nRed, Green, Blue\nRed, Green, Blue, Alpha\nRandom Number Generator\nMutable methods for core::RNG\nConstant methods for core::RNG\nMersenne Twister random number generator\nMutable methods for core::RNG_MT19937\nConstant methods for core::RNG_MT19937\nRotate 180 degrees clockwise\nRotate 180 degrees clockwise\nRotate 90 degrees clockwise\nRotate 90 degrees clockwise\nRotate 270 degrees clockwise\nRotate 270 degrees clockwise\nTemplate class specifying a continuous subsequence (slice) …\nMutable methods for core::Range\nConstant methods for core::Range\nrender mode\nThe class represents rotated (i.e. not up-right) …\nthere are multiple maxima for target function - the …\nthere are multiple maxima for target function - the …\nthere is only one maximum for target function\nthere is only one maximum for target function\nproblem is unbounded (target function can achieve …\nproblem is unbounded (target function can achieve …\nproblem is unfeasible (there are no points that satisfy …\nproblem is unfeasible (there are no points that satisfy …\neach matrix row is sorted in the ascending order.\neach matrix row is sorted in the descending order; this …\neach matrix row is sorted in the descending order; this …\neach matrix column is sorted independently; this flag and …\neach matrix column is sorted independently; this flag and …\neach matrix row is sorted independently\neach matrix row is sorted independently\nremoved: https://github.com/opencv/opencv/issues/18897\nSingular Value Decomposition\nMutable methods for core::SVD\nConstant methods for core::SVD\nwhen the matrix is not square, by default the algorithm …\nallow the algorithm to modify the decomposed matrix; it …\nindicates that only a vector of singular values <code>w</code> is to be …\nreturn codes for cv::solveLP() function\nSome value of type <code>T</code>.\nThe class SparseMat represents multi-dimensional sparse …\nRead-Only Sparse Matrix Iterator.\nMutable methods for core::SparseMatConstIterator\nConstant methods for core::SparseMatConstIterator\nRead-write Sparse Matrix Iterator\nMutable methods for core::SparseMatIterator\nConstant methods for core::SparseMatIterator\nMutable methods for core::SparseMat\nConstant methods for core::SparseMat\nthe sparse matrix header\nMutable methods for core::SparseMat_Hdr\nConstant methods for core::SparseMat_Hdr\nsparse matrix node - element of a hash table\nMutable methods for core::SparseMat_Node\nConstant methods for core::SparseMat_Node\nThis class encapsulates a queue of asynchronous calls.\nMutable methods for core::Stream\nConstant methods for core::Stream\nassertion failed\nassertion failed\ntracing\ntracing\npseudo error for back trace\npseudo error for back trace\nfunction arg/param is bad\nfunction arg/param is bad\nflag is wrong or not supported\nflag is wrong or not supported\nunsupported function\nunsupported function\nbad format of mask (neither 8uC1 nor 8sC1)\nbad format of mask (neither 8uC1 nor 8sC1)\nan allocated block has been corrupted\nan allocated block has been corrupted\nbad CvPoint\nbad CvPoint\nthe input/output structure size is incorrect\nthe input/output structure size is incorrect\ndivision by zero\ndivision by zero\nunknown /unspecified error\nunknown /unspecified error\nincorrect filter offset value\nincorrect filter offset value\nincorrect filter structure content\nincorrect filter structure content\nin-place operation is not supported\nin-place operation is not supported\ninternal error (bad state)\ninternal error (bad state)\nincorrect transform kernel content\nincorrect transform kernel content\niteration didn’t converge\niteration didn’t converge\ninsufficient memory\ninsufficient memory\nthe requested function/feature is not implemented\nthe requested function/feature is not implemented\nnull pointer\nnull pointer\nrequest can’t be completed\nrequest can’t be completed\neverything is ok\neverything is ok\nsome of parameters are out of range\nsome of parameters are out of range\ninvalid syntax/structure of the parsed file\ninvalid syntax/structure of the parsed file\nformats of input/output arrays differ\nformats of input/output arrays differ\nsizes of input/output structures do not match\nsizes of input/output structures do not match\nthe data format/type is not supported by the function\nthe data format/type is not supported by the function\nincorrect vector length\nincorrect vector length\nClass providing a set of static methods to check what …\nMutable methods for core::TargetArchs\nConstant methods for core::TargetArchs\nThe class defining termination criteria for iterative …\nthe maximum number of iterations or elements to compute\nthe desired accuracy or change in parameters at which the …\nditto\nCriteria type, can be one of: COUNT, EPS or COUNT + EPS\nSmart pointer for OpenGL 2D texture memory with reference …\nMutable methods for core::Texture2D\nConstant methods for core::Texture2D\nDepth\nAn Image Format describes the way that the images in …\nRed, Green, Blue\nRed, Green, Blue, Alpha\na Class to measure passing time.\nMutable methods for core::TickMeter\nConstant methods for core::TickMeter\nMutable methods for core::Timer\nConstant methods for core::Timer\n@todo document\nMutable methods for core::UMatData\nConstant methods for core::UMatData\nMutable methods for core::UMat\nConstant methods for core::UMat\nUsage flags for allocator\nShorter aliases for the most popular specializations of Vec…\nvalue, open the file for writing\nflag, enable both WRITE and BASE64\nMutable methods for core::WriteStructContext\nConstant methods for core::WriteStructContext\nThis is the proxy class for passing read-only input arrays …\nMutable methods for core::_InputArray\nConstant methods for core::_InputArray\nremoved: https://github.com/opencv/opencv/pull/17046\nremoved: https://github.com/opencv/opencv/issues/18897\nMutable methods for core::_InputOutputArray\nConstant methods for core::_InputOutputArray\nThis type is very similar to InputArray except that it is …\nMutable methods for core::_OutputArray\nConstant methods for core::_OutputArray\nSet the about message\nSet the about message\nSet the about message\nSet the about message\nSet the about message\nCalculates an absolute value of each matrix element.\nCalculates an absolute value of each matrix element.\nCalculates the per-element absolute difference between two …\nCalculates the per-element sum of two arrays or an array …\nCalculates the per-element sum of two arrays or an array …\n@relates cv::MatExpr\nOverride search data path by adding new search location\nAppend samples search data sub directory\nCalculates the weighted sum of two arrays.\nCalculates the weighted sum of two arrays.\nIncrements the reference counter.\nIncrements the reference counter.\nIncrements the reference counter.\nIncrements the reference counter.\nIncrements the reference counter.\nmanually increments the reference counter to the header.\nmanually increments the reference counter to the header.\nmanually increments the reference counter to the header.\nmanually increments the reference counter to the header.\nmanually increments the reference counter to the header.\nincreases the reference counter; use with care to avoid …\nincreases the reference counter; use with care to avoid …\nincreases the reference counter; use with care to avoid …\nincreases the reference counter; use with care to avoid …\nincreases the reference counter; use with care to avoid …\nAdjusts a submatrix size and position within the parent …\nAdjusts a submatrix size and position within the parent …\nAdjusts a submatrix size and position within the parent …\nAdjusts a submatrix size and position within the parent …\nAdjusts a submatrix size and position within the parent …\nmoves/resizes the current matrix ROI inside the parent …\nmoves/resizes the current matrix ROI inside the parent …\nmoves/resizes the current matrix ROI inside the parent …\nmoves/resizes the current matrix ROI inside the parent …\nmoves/resizes the current matrix ROI inside the parent …\nmoves/resizes the current GpuMat ROI inside the parent …\nmoves/resizes the current GpuMat ROI inside the parent …\nmoves/resizes the current GpuMat ROI inside the parent …\nmoves/resizes the current GpuMat ROI inside the parent …\nmoves/resizes the current GpuMat ROI inside the parent …\nallocator\nallocator\nallocator\nallocator\nallocator\ncomputed orientation of the keypoint (-1 if not …\ncomputed orientation of the keypoint (-1 if not …\ncomputed orientation of the keypoint (-1 if not …\ncomputed orientation of the keypoint (-1 if not …\ncomputed orientation of the keypoint (-1 if not …\nreturns the rotation angle. When the angle is 0, 90, 180, …\nthis will count the bits in a ^ b\nthis will count the bits in a ^ b\nthis will count the bits in a ^ b\nthis will count the bits in a ^ b\nthis will count the bits in a ^ b\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nperforms %PCA\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nthe operator that performs SVD. The previously allocated …\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nreturns a random integer sampled uniformly from [0, N).\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nProvides a functional form of convertTo.\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nnumber of asynchronous engines\nnumber of asynchronous engines\nnumber of asynchronous engines\nnumber of asynchronous engines\nnumber of asynchronous engines\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nReturns a reference to the specified array element.\nAttaches OpenCL context to OpenCV\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nReconstructs vectors from their PC projections.\nperforms a singular value back substitution.\nperforms a singular value back substitution.\nperforms a singular value back substitution.\nperforms a singular value back substitution.\nperforms a singular value back substitution.\nperforms back substitution\nnaive nearest neighbor finder\nnaive nearest neighbor finder\nreturns iterator pointing to the first node element\nreturns iterator pointing to the first node element\nreturns iterator pointing to the first node element\nreturns iterator pointing to the first node element\nreturns iterator pointing to the first node element\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturn the sparse matrix iterator pointing to the first …\nreturn the sparse matrix iterator pointing to the first …\nreturn the sparse matrix iterator pointing to the first …\nreturn the sparse matrix iterator pointing to the first …\nreturn the sparse matrix iterator pointing to the first …\nBind this OpenCL execution context to current thread.\nBind this OpenCL execution context to current thread.\nBind this OpenCL execution context to current thread.\nBind this OpenCL execution context to current thread.\nBind this OpenCL execution context to current thread.\nBinds all vertex arrays.\nBinds all vertex arrays.\nBinds all vertex arrays.\nBinds all vertex arrays.\nBinds all vertex arrays.\nBinds OpenGL buffer to the specified buffer binding point.\nBinds OpenGL buffer to the specified buffer binding point.\nBinds OpenGL buffer to the specified buffer binding point.\nBinds OpenGL buffer to the specified buffer binding point.\nBinds OpenGL buffer to the specified buffer binding point.\nBinds texture to current active texture unit for …\nBinds texture to current active texture unit for …\nBinds texture to current active texture unit for …\nBinds texture to current active texture unit for …\nBinds texture to current active texture unit for …\ncomputes bitwise conjunction of the two arrays (dst = src1 …\ncomputes bitwise conjunction of the two arrays (dst = src1 …\nInverts every bit of an array.\nInverts every bit of an array.\nCalculates the per-element bit-wise disjunction of two …\nCalculates the per-element bit-wise disjunction of two …\nCalculates the per-element bit-wise “exclusive or” …\nCalculates the per-element bit-wise “exclusive or” …\nComputes the source location of an extrapolated pixel.\nreturns the minimal up-right integer rectangle containing …\nreturns the minimal (exact) floating point rectangle …\nget OpenGL opject id\nget OpenGL opject id\nget OpenGL opject id\nget OpenGL opject id\nget OpenGL opject id\nThe following method checks whether the module was built …\nCalculates the covariance matrix of a set of vectors.\n@overload\nIndicates if creating an aliased image should succeed. …\ndevice can map host memory with …\ndevice can map host memory with …\ndevice can map host memory with …\ndevice can map host memory with …\ndevice can map host memory with …\nCalculates the magnitude and angle of 2D vectors.\nCalculates the magnitude and angle of 2D vectors.\nreturns the rectangle mass center\nReturns the number of matrix channels.\nReturns the number of matrix channels.\nReturns the number of matrix channels.\nReturns the number of matrix channels.\nReturns the number of matrix channels.\nreturns the number of channels\nreturns the number of channels\nreturns the number of channels\nreturns the number of channels\nreturns the number of channels\nreturns element type, similar to CV_MAT_CN(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_CN(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_CN(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_CN(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_CN(cvmat-&gt;type)\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nreturns number of channels\nreturns number of channels\nreturns number of channels\nreturns number of channels\nreturns number of channels\nNote\nNote\nNote\nNote\nNote\nCheck for parsing errors\nCheck for parsing errors\nCheck for parsing errors\nCheck for parsing errors\nCheck for parsing errors\nReturns true if the specified feature is supported by the …\nC++ default parameters\nNote\nChecks every element of an input array for invalid values.\nChecks every element of an input array for invalid values.\nParameters\nParameters\nParameters\nParameters\nParameters\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nParameters\nParameters\nParameters\nParameters\nParameters\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nreturns N if the matrix is 1-channel (N x ptdim) or …\nproxy for hal::Cholesky\nproxy for hal::Cholesky\nobject class (if the keypoints need to be clustered by an …\nobject class (if the keypoints need to be clustered by an …\nobject class (if the keypoints need to be clustered by an …\nobject class (if the keypoints need to be clustered by an …\nobject class (if the keypoints need to be clustered by an …\nClears the algorithm state\nClears the algorithm state\nClears the algorithm state\nClears the algorithm state\nClears the algorithm state\nsets all the sparse matrix elements to 0, which means …\nsets all the sparse matrix elements to 0, which means …\nsets all the sparse matrix elements to 0, which means …\nsets all the sparse matrix elements to 0, which means …\nsets all the sparse matrix elements to 0, which means …\nclock frequency in kilohertz\nclock frequency in kilohertz\nclock frequency in kilohertz\nclock frequency in kilohertz\nclock frequency in kilohertz\nCalls try_clone() and panics if that fails\nCalls try_clone() and panics if that fails\nCalls try_clone() and panics if that fails\nCalls try_clone() and panics if that fails\nCreates a full copy of the array and the underlying data. …\nCreates a full copy of the array and the underlying data. …\nCreates a full copy of the array and the underlying data. …\nCreates a full copy of the array and the underlying data. …\nCreates a full copy of the array and the underlying data. …\nCalls try_clone() and panics if that fails\nCalls try_clone() and panics if that fails\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates a full copy of the buffer object and the …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nCreates new execution context with same OpenCV context and …\nerror code see also: CVStatus\nerror code see also: CVStatus\nerror code see also: CVStatus\nerror code see also: CVStatus\nerror code see also: CVStatus\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\n… for the specified column span\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nCreates a matrix header for the specified matrix column.\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new matrix header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nreturns a new GpuMat header for the specified column\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\nCreates a matrix header for the specified column span.\n@overload\n@overload\n@overload\n@overload\n@overload\nthe number of rows and columns or (-1, -1) when the matrix …\nthe number of rows and columns or (-1, -1) when the matrix …\nthe number of rows and columns or (-1, -1) when the matrix …\nthe number of rows and columns or (-1, -1) when the matrix …\nthe number of rows and columns or (-1, -1) when the matrix …\nnumber of columns in the matrix; -1 when the matrix has …\nnumber of columns in the matrix; -1 when the matrix has …\nnumber of columns in the matrix; -1 when the matrix has …\nnumber of columns in the matrix; -1 when the matrix has …\nnumber of columns in the matrix; -1 when the matrix has …\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nthe number of rows and columns\nthe number of rows and columns\nthe number of rows and columns\nthe number of rows and columns\nthe number of rows and columns\nNote\nNote\nNote\nNote\nNote\nPerforms the per-element comparison of two arrays or an …\nCopies the lower or the upper half of a square matrix to …\nCopies the lower or the upper half of a square matrix to …\nCompute the discriminants for data in src (row aligned) …\nCompute the discriminants for data in src (row aligned) …\nCompute the discriminants for data in src (row aligned) …\nCompute the discriminants for data in src (row aligned) …\nCompute the discriminants for data in src (row aligned) …\ndecomposes matrix and stores the results to user-provided …\n@overload computes singular values of a matrix\ndecomposes matrix and stores the results to user-provided …\ndecomposes matrix and stores the results to user-provided …\ncompute mode\ncompute mode\ncompute mode\ncompute mode\ncompute mode\ndevice can possibly execute multiple kernels concurrently\ndevice can possibly execute multiple kernels concurrently\ndevice can possibly execute multiple kernels concurrently\ndevice can possibly execute multiple kernels concurrently\ndevice can possibly execute multiple kernels concurrently\nThis method converts vector of keypoints to vector of …\nThis method converts vector of keypoints to vector of …\nConverts an array to half precision floating number.\nConvert OpenCL buffer to UMat\nParameters\nParameters\nParameters\nParameters\nConverts Texture2D object to OutputArray.\nConvert OpenCL image2d_t to UMat\nConverts VASurfaceID object to OutputArray.\nScales, calculates absolute values, and converts the …\nScales, calculates absolute values, and converts the …\nThis method converts vector of keypoints to vector of …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts GpuMat to another datatype (Blocking call)\nconverts GpuMat to another datatype (Blocking call)\nconverts GpuMat to another datatype (Blocking call)\nconverts GpuMat to another datatype (Blocking call)\nconverts GpuMat to another datatype (Blocking call)\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts GpuMat to another datatype (Non-Blocking call)\nconverts GpuMat to another datatype (Non-Blocking call)\nconverts GpuMat to another datatype (Non-Blocking call)\nconverts GpuMat to another datatype (Non-Blocking call)\nconverts GpuMat to another datatype (Non-Blocking call)\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nconverts GpuMat to another datatype with scaling …\nParameters\nParameters\n@overload\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nConverts an array to another data type with optional …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nmultiplies all the matrix elements by the specified scale …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts matrix to another datatype with optional scaling. …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts GpuMat to another datatype with scaling (Blocking …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nconverts sparse matrix to dense n-dim matrix with optional …\nParameters\nParameters\nConverts InputArray to Texture2D object.\nConverts InputArray to VASurfaceID object.\nCopy constructor\nThe constructors.\nThe constructors.\nThese are various constructors that form a matrix. As …\ncopy constructor\nVarious SparseMat constructors.\nthe copy constructor\nthe copy constructor\ncopy constructor\ncopy constructor\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL buffer.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\nCopies from host/device memory to OpenGL texture.\n@overload\n@overload\n@overload\n@overload\n@overload\nForms a border around an image.\nForms a border around an image.\n@overload\nThis is an overloaded member function, provided for …\nCopies the matrix to another one.\nCopies the matrix to another one.\nCopies the matrix to another one.\nCopies the matrix to another one.\nCopies the matrix to another one.\ncopies all the data to the destination matrix. All the …\ncopies all the data to the destination matrix. All the …\ncopies all the data to the destination matrix. All the …\ncopies all the data to the destination matrix. All the …\ncopies all the data to the destination matrix. All the …\ncopies the matrix content to “m”.\ncopies the matrix content to “m”.\ncopies the matrix content to “m”.\ncopies the matrix content to “m”.\ncopies the matrix content to “m”.\ncopies the GpuMat content to device memory (Blocking call)\ncopies the GpuMat content to device memory (Blocking call)\ncopies the GpuMat content to device memory (Blocking call)\ncopies the GpuMat content to device memory (Blocking call)\ncopies the GpuMat content to device memory (Blocking call)\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL buffer to host/device memory or another …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\nCopies from OpenGL texture to host/device memory or …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\ncopies those GpuMat elements to “m” that are marked …\nCopies the matrix to another one.\nCopies the matrix to another one.\nCopies the matrix to another one.\nCopies the matrix to another one.\nCopies the matrix to another one.\ncopies those matrix elements to “m” that are marked …\ncopies those matrix elements to “m” that are marked …\ncopies those matrix elements to “m” that are marked …\ncopies those matrix elements to “m” that are marked …\ncopies those matrix elements to “m” that are marked …\nconverts sparse matrix to dense matrix.\nconverts sparse matrix to dense matrix.\nconverts sparse matrix to dense matrix.\nconverts sparse matrix to dense matrix.\nconverts sparse matrix to dense matrix.\ncopies the GpuMat content to device memory (Non-Blocking …\ncopies the GpuMat content to device memory (Non-Blocking …\ncopies the GpuMat content to device memory (Non-Blocking …\ncopies the GpuMat content to device memory (Non-Blocking …\ncopies the GpuMat content to device memory (Non-Blocking …\nCounts non-zero array elements.\nThis function returns the reference to the ready-to-use …\nThis function returns the reference to the ready-to-use …\nreallocates sparse matrix.\nreallocates sparse matrix.\nreallocates sparse matrix.\nreallocates sparse matrix.\nreallocates sparse matrix.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nallocates new GpuMat data unless the GpuMat already has …\nallocates new GpuMat data unless the GpuMat already has …\nallocates new GpuMat data unless the GpuMat already has …\nallocates new GpuMat data unless the GpuMat already has …\nallocates new GpuMat data unless the GpuMat already has …\nAllocates GPU memory. Suppose there is some GPU memory …\nAllocates GPU memory. Suppose there is some GPU memory …\nAllocates GPU memory. Suppose there is some GPU memory …\nAllocates GPU memory. Suppose there is some GPU memory …\nAllocates GPU memory. Suppose there is some GPU memory …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\n@deprecated\n@deprecated\n@deprecated\n@deprecated\n@deprecated\nCreates OpenCL execution context OpenCV will check if …\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nCreates OpenCL execution context\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nCreates OpenCL execution context\nCreates a continuous matrix.\nThis function returns the reference to the ready-to-use …\nThis function returns the reference to the ready-to-use …\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\nAllocates memory for ogl::Texture2D object.\n@overload\n@overload\n@overload\n@overload\n@overload\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nMaps CPU memory to GPU address space and creates the …\nMaps CPU memory to GPU address space and creates the …\nMaps CPU memory to GPU address space and creates the …\nMaps CPU memory to GPU address space and creates the …\nMaps CPU memory to GPU address space and creates the …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\nCreates a GpuMat header for a 2D plane part of an n-dim …\n@overload Creates a GpuMat header if this GpuMatND is …\n@overload Creates a GpuMat header if this GpuMatND is …\n@overload Creates a GpuMat header if this GpuMatND is …\n@overload Creates a GpuMat header if this GpuMatND is …\n@overload Creates a GpuMat header if this GpuMatND is …\nreturns matrix header with disabled reference counting for …\nreturns matrix header with disabled reference counting for …\nreturns matrix header with disabled reference counting for …\nreturns matrix header with disabled reference counting for …\nreturns matrix header with disabled reference counting for …\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nallocates new matrix data unless the matrix already has …\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nAllocates new array data if needed.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nAllocates memory for ogl::Buffer object.\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\n@overload\n@overload\n@overload\n@overload\n@overload\n@deprecated\n@deprecated\n@deprecated\n@deprecated\n@deprecated\nComputes a cross-product of two 3-element vectors.\nComputes a cross-product of two 3-element vectors.\nComputes a cross-product of two 3-element vectors.\nComputes a cross-product of two 3-element vectors.\nComputes a cross-product of two 3-element vectors.\nComputes the cube root of an argument.\nreturn Pointer to CUDA stream\nreturn Pointer to CUDA stream\nreturn Pointer to CUDA stream\nreturn Pointer to CUDA stream\nreturn Pointer to CUDA stream\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\npointer to the data\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nhelper fields used in locateROI and adjustROI\nPerforms a forward or inverse discrete Cosine transform of …\nPerforms a forward or inverse discrete Cosine transform of …\ninternal use function, consider to use ‘release’ …\ninternal use function, consider to use ‘release’ …\ninternal use function, consider to use ‘release’ …\ninternal use function, consider to use ‘release’ …\ninternal use function, consider to use ‘release’ …\ndeallocates the matrix data\ndeallocates the matrix data\ndeallocates the matrix data\ndeallocates the matrix data\ndeallocates the matrix data\ndecrements the iterator\ndecrements the iterator\ndecrements the iterator\ndecrements the iterator\ndecrements the iterator\nForwards to infallible Self::default()\nForwards to infallible Self::default()\n! Default constructor\nThe constructors.\nThe constructors.\nThe constructors.\nForwards to infallible Self::default()\nCreates a default instance of the class by calling the …\nthe default constructor\nThese are various constructors that form a matrix. As …\nForwards to infallible Self::default()\ndefault constructor\n////////////////////////// MatStep …\nForwards to infallible Self::default()\ndefault constructor\nconstructor\n////////////////////////////// Range …\nthe default constructor\nVarious SparseMat constructors.\nForwards to infallible Self::default()\nCreates a default instance of the class by calling the …\nthe default constructor\nthe default constructor\nthe default constructor\n…\n…\ncreates DeviceInfo object for the current GPU\ndefault constructor\ncreates a new asynchronous stream\nForwards to infallible Self::default()\nCreates a default instance of the class by calling the …\nForwards to infallible Self::default()\nCreates a default instance of the class by calling the …\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nCreates a default instance of the class by calling the …\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nForwards to infallible Self::default()\nDefault constructor\nThe constructors.\nThe constructors.\n////////////////////////////// DMatch …\nthe default constructor\ndefault constructor\ndefault constructor\ndefault allocator\nReturns the depth of a matrix element.\nReturns the depth of a matrix element.\nReturns the depth of a matrix element.\nReturns the depth of a matrix element.\nReturns the depth of a matrix element.\nreturns the depth of sparse matrix elements\nreturns the depth of sparse matrix elements\nreturns the depth of sparse matrix elements\nreturns the depth of sparse matrix elements\nreturns the depth of sparse matrix elements\nreturns element type, similar to CV_MAT_DEPTH(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_DEPTH(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_DEPTH(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_DEPTH(cvmat-&gt;type)\nreturns element type, similar to CV_MAT_DEPTH(cvmat-&gt;type)\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nreturns element type\nreturns element type\nreturns element type\nreturns element type\nreturns element type\nNote\nNote\nNote\nNote\nNote\nReturns string of cv::Mat depth value: CV_8U -&gt; “CV_8U”…\nReturns the determinant of a square floating-point matrix.\nReturns system index of the CUDA device starting with 0.\nReturns system index of the CUDA device starting with 0.\nReturns system index of the CUDA device starting with 0.\nReturns system index of the CUDA device starting with 0.\nReturns system index of the CUDA device starting with 0.\nchecks whether current device supports the given feature\nPerforms a forward or inverse Discrete Fourier transform …\nPerforms a forward or inverse Discrete Fourier transform …\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nNote\nNote\nNote\nNote\nNote\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\nconstructs a square diagonal matrix which main diagonal is …\ncreates a diagonal matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\nExtracts a diagonal from a matrix\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\n… for the specified diagonal (d=0 - the main diagonal, …\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nreturns the matrix dimensionality\nreturns the matrix dimensionality\nreturns the matrix dimensionality\nreturns the matrix dimensionality\nreturns the matrix dimensionality\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nthe matrix dimensionality, &gt;= 2\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nmatrix dimensionality\nmatrix dimensionality\nmatrix dimensionality\nmatrix dimensionality\nmatrix dimensionality\nNote\nNote\nNote\nNote\nNote\nPerforms per-element division of two arrays or a scalar by …\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nPerforms per-element division of two arrays or a scalar by …\nPerforms per-element division of two arrays or a scalar by …\n@overload\nNote\nNote\nNote\nNote\nNote\nComputes a dot-product of two vectors.\nComputes a dot-product of two vectors.\nComputes a dot-product of two vectors.\nComputes a dot-product of two vectors.\nComputes a dot-product of two vectors.\ncomputes dot-product\ncomputes dot-product\ncomputes dot-product\ncomputes dot-product\ncomputes dot-product\nPerforms data download from GpuMat (Blocking call)\nPerforms data download from GpuMat (Blocking call)\nPerforms data download from GpuMat (Blocking call)\nPerforms data download from GpuMat (Blocking call)\nPerforms data download from GpuMat (Blocking call)\nPerforms data download from GpuMat (Non-Blocking call)\nPerforms data download from GpuMat (Non-Blocking call)\nPerforms data download from GpuMat (Non-Blocking call)\nPerforms data download from GpuMat (Non-Blocking call)\nPerforms data download from GpuMat (Non-Blocking call)\ndevice has ECC support enabled\ndevice has ECC support enabled\ndevice has ECC support enabled\ndevice has ECC support enabled\ndevice has ECC support enabled\nCalculates eigenvalues and eigenvectors of a symmetric …\nCalculates eigenvalues and eigenvectors of a symmetric …\nCalculates eigenvalues and eigenvectors of a non-symmetric …\nReturns the eigenvalues of this LDA.\nReturns the eigenvalues of this LDA.\nReturns the eigenvalues of this LDA.\nReturns the eigenvalues of this LDA.\nReturns the eigenvalues of this LDA.\neigenvalues of the covariation matrix\neigenvalues of the covariation matrix\neigenvalues of the covariation matrix\neigenvalues of the covariation matrix\neigenvalues of the covariation matrix\nReturns the eigenvectors of this LDA.\nReturns the eigenvectors of this LDA.\nReturns the eigenvectors of this LDA.\nReturns the eigenvectors of this LDA.\nReturns the eigenvectors of this LDA.\neigenvectors of the covariation matrix\neigenvectors of the covariation matrix\neigenvectors of the covariation matrix\neigenvectors of the covariation matrix\neigenvectors of the covariation matrix\ncomputes the elapsed time between events\nReturns the matrix element size in bytes.\nReturns the matrix element size in bytes.\nReturns the matrix element size in bytes.\nReturns the matrix element size in bytes.\nReturns the matrix element size in bytes.\nreturns the size of each element in bytes (not including …\nreturns the size of each element in bytes (not including …\nreturns the size of each element in bytes (not including …\nreturns the size of each element in bytes (not including …\nreturns the size of each element in bytes (not including …\nreturns element size in bytes,\nreturns element size in bytes,\nreturns element size in bytes,\nreturns element size in bytes,\nreturns element size in bytes,\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nreturns element size in bytes\nReturns the size of each matrix element channel in bytes.\nReturns the size of each matrix element channel in bytes.\nReturns the size of each matrix element channel in bytes.\nReturns the size of each matrix element channel in bytes.\nReturns the size of each matrix element channel in bytes.\nreturns elemSize()/channels()\nreturns elemSize()/channels()\nreturns elemSize()/channels()\nreturns elemSize()/channels()\nreturns elemSize()/channels()\nreturns the size of element channel in bytes.\nreturns the size of element channel in bytes.\nreturns the size of element channel in bytes.\nreturns the size of element channel in bytes.\nreturns the size of element channel in bytes.\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nreturns the size of element channel in bytes\nReturns true if the Algorithm is empty (e.g. in the very …\nReturns true if the Algorithm is empty (e.g. in the very …\nReturns true if the Algorithm is empty (e.g. in the very …\nReturns true if the Algorithm is empty (e.g. in the very …\nReturns true if the Algorithm is empty (e.g. in the very …\nreturns true if the node is empty\nreturns true if the node is empty\nreturns true if the node is empty\nreturns true if the node is empty\nreturns true if the node is empty\nReturns true if the array has no elements.\nReturns true if the array has no elements.\nReturns true if the array has no elements.\nReturns true if the array has no elements.\nReturns true if the array has no elements.\nreturns true if matrix data is NULL\nreturns true if matrix data is NULL\nreturns true if matrix data is NULL\nreturns true if matrix data is NULL\nreturns true if matrix data is NULL\nreturns true if GpuMat data is NULL\nreturns true if GpuMat data is NULL\nreturns true if GpuMat data is NULL\nreturns true if GpuMat data is NULL\nreturns true if GpuMat data is NULL\nreturns true if data is null\nreturns true if data is null\nreturns true if data is null\nreturns true if data is null\nreturns true if data is null\nreturns iterator pointing to the element following the …\nreturns iterator pointing to the element following the …\nreturns iterator pointing to the element following the …\nreturns iterator pointing to the element following the …\nreturns iterator pointing to the element following the …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturns the read-only sparse matrix iterator at the matrix …\nreturn the sparse matrix iterator pointing to the element …\nreturn the sparse matrix iterator pointing to the element …\nreturn the sparse matrix iterator pointing to the element …\nreturn the sparse matrix iterator pointing to the element …\nreturn the sparse matrix iterator pointing to the element …\nFinishes writing nested structure (should pair …\nFinishes writing nested structure (should pair …\nFinishes writing nested structure (should pair …\nFinishes writing nested structure (should pair …\nFinishes writing nested structure (should pair …\nAdds a callback to be called on the host after all …\nAdds a callback to be called on the host after all …\nAdds a callback to be called on the host after all …\nAdds a callback to be called on the host after all …\nAdds a callback to be called on the host after all …\nEnsures that the size of a matrix is big enough and the …\nthe desired accuracy\n@relates cv::FileNodeIterator\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (2D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (3D case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerases the specified element (nD case)\nerror description\nerror description\nerror description\nerror description\nerror description\n! Signals an error and raises the exception.\n! Signals an error and raises the exception.\nCalculates the exponent of every array element.\nreturns true if not empty and points to …\nreturns true if not empty and points to …\nreturns true if not empty and points to …\nreturns true if not empty and points to …\nreturns true if not empty and points to …\nExtracts a single channel from src (coi is 0-based index)\nReturns an identity matrix of the specified size and type.\nReturns an identity matrix of the specified size and type.\nCalculates the angle of a 2D vector in degrees.\nsource file name where the error has occurred\nsource file name where the error has occurred\nsource file name where the error has occurred\nsource file name where the error has occurred\nsource file name where the error has occurred\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nFills arrays with random numbers.\nTry to find requested data file\nTry to find requested data file\nC++ default parameters\nNote\nReturns the list of locations of non-zero pixels\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\n! includes several bit-fields:\nFlips a 2D array around vertical, horizontal, or both axes.\nAny 3 end points of the RotatedRect. They must be given in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDescribe OpenCL program binary. Do not call …\nDescribe OpenCL program binary. Do not call …\nCreate a new <code>Mat</code> from a single-dimensional byte slice\nCreate a new <code>Mat</code> from a mutable single-dimensional byte …\nCreate new <code>Mat</code> from the iterator of known size\ndownload data from GpuMat\ndownload data from GpuMat\nParameters\nParameters\nbuilds GpuMat from host memory (Blocking call)\nbuilds GpuMat from host memory (Blocking call)\nVarious SparseMat constructors.\nCreate a new <code>Mat</code> from a single-dimensional slice\nCreate a new <code>Mat</code> by copying the data from a slice of slices\nCreate a new <code>Mat</code> from a mutable single-dimensional slice\nDescribe OpenCL program in SPIR format. Do not call …\nDescribe OpenCL program in SPIR format. Do not call …\nfunction name. Available only when the compiler supports …\nfunction name. Available only when the compiler supports …\nfunction name. Available only when the compiler supports …\nfunction name. Available only when the compiler supports …\nfunction name. Available only when the compiler supports …\nReturns the next random number sampled from the Gaussian …\nReturns the next random number sampled from the Gaussian …\nReturns the next random number sampled from the Gaussian …\nReturns the next random number sampled from the Gaussian …\nReturns the next random number sampled from the Gaussian …\nPerforms generalized matrix multiplication.\nPerforms generalized matrix multiplication.\nFetch the result.\nFetch the result.\nFetch the result.\nFetch the result.\nFetch the result.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nC++ default parameters\nreturns the i-th matrix element, relative to the current\nreturns the i-th matrix element, relative to the current\nreturns the i-th matrix element, relative to the current\nreturns the i-th matrix element, relative to the current\nreturns the i-th matrix element, relative to the current\nReturns the allocator associated with the stream.\nReturns the allocator associated with the stream.\nReturns the allocator associated with the stream.\nReturns the allocator associated with the stream.\nReturns the allocator associated with the stream.\nReturns associated AsyncArray\nReturns associated AsyncArray\nReturns associated AsyncArray\nReturns associated AsyncArray\nReturns associated AsyncArray\nreturns average time in milliseconds\nreturns average time in milliseconds\nreturns average time in milliseconds\nreturns average time in milliseconds\nreturns average time in milliseconds\nreturns average time in seconds\nreturns average time in seconds\nreturns average time in seconds\nreturns average time in seconds\nreturns average time in seconds\nQuery device-specific program binary.\nQuery device-specific program binary.\nQuery device-specific program binary.\nQuery device-specific program binary.\nQuery device-specific program binary.\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nAllocates a new GpuMat of given size and type.\nReturns full configuration time cmake output.\nGet associated ocl::Context\nGet associated ocl::Context\nGet associated ocl::Context\nGet associated ocl::Context\nGet associated ocl::Context\nreturns internal counter value.\nreturns internal counter value.\nreturns internal counter value.\nreturns internal counter value.\nreturns internal counter value.\nReturns list of CPU features enabled during compilation.\nReturns the number of CPU ticks.\nReturns the number of installed CUDA-enabled devices.\nGet OpenCL execution context of current thread.\nGet OpenCL execution context of current thread (can be …\nNote\nC++ default parameters\n@deprecated\nNote\nReturns the algorithm string identifier. This string is …\nReturns the algorithm string identifier. This string is …\nReturns the algorithm string identifier. This string is …\nReturns the algorithm string identifier. This string is …\nReturns the algorithm string identifier. This string is …\nReturns the normalized object name for the specified name …\nReturns the current device index set by cuda::setDevice or …\nGet the single default associated ocl::Device\nGet the single default associated ocl::Device\nGet the single default associated ocl::Device\nGet the single default associated ocl::Device\nGet the single default associated ocl::Device\nreturns pointer to the first byte of the GPU memory\nreturns pointer to the first byte of the GPU memory\nreturns pointer to the first byte of the GPU memory\nreturns pointer to the first byte of the GPU memory\nreturns pointer to the first byte of the GPU memory\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nReturns the first element of the top-level mapping.\nReturns the first element of the top-level mapping.\nReturns the first element of the top-level mapping.\nReturns the first element of the top-level mapping.\nReturns the first element of the top-level mapping.\nReturns the current format.\nReturns the current format.\nReturns the current format.\nReturns the current format.\nReturns the current format.\nreturns average FPS (frames per second) value.\nreturns average FPS (frames per second) value.\nreturns average FPS (frames per second) value.\nreturns average FPS (frames per second) value.\nreturns average FPS (frames per second) value.\nGetter for the optimized function.\nGetter for the optimized function.\nGetter for the optimized function.\nGetter for the optimized function.\nGetter for the optimized function.\nGet global log tag\nReturns feature name by ID\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nReturns the initial step that will be used in downhill …\nReturns the initial step that will be used in downhill …\nReturns the initial step that will be used in downhill …\nReturns the initial step that will be used in downhill …\nReturns the initial step that will be used in downhill …\nGet global logging level\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nNote\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns element of a mapping node or a sequence node.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the specified element of the top-level mapping.\nReturns the number of threads used by OpenCV for parallel …\nReturns the number of logical CPUs available for the …\nGet OpenCL context property specified on context creation\nGet OpenCL context property specified on context creation\nGet OpenCL context property specified on context creation\nGet OpenCL context property specified on context creation\nGet OpenCL context property specified on context creation\nReturns the optimal DFT size for a given vector size.\nReturns application path\nReturns application path\nReturns application path\nReturns application path\nReturns application path\nReturns OpenCL command queue with enable profiling mode …\nReturns OpenCL command queue with enable profiling mode …\nReturns OpenCL command queue with enable profiling mode …\nReturns OpenCL command queue with enable profiling mode …\nReturns OpenCL command queue with enable profiling mode …\nGet the single ocl::Queue that is associated with the …\nGet the single ocl::Queue that is associated with the …\nGet the single ocl::Queue that is associated with the …\nGet the single ocl::Queue that is associated with the …\nGet the single ocl::Queue that is associated with the …\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nGetter for the previously set terminal criteria for this …\nGetter for the previously set terminal criteria for this …\nGetter for the previously set terminal criteria for this …\nGetter for the previously set terminal criteria for this …\nGetter for the previously set terminal criteria for this …\nReturns the index of the currently executed thread within …\nReturns the number of ticks.\nReturns the number of ticks per second.\nreturns passed time in microseconds.\nreturns passed time in microseconds.\nreturns passed time in microseconds.\nreturns passed time in microseconds.\nreturns passed time in microseconds.\nreturns passed time in milliseconds.\nreturns passed time in milliseconds.\nreturns passed time in milliseconds.\nreturns passed time in milliseconds.\nreturns passed time in milliseconds.\nreturns passed time in seconds.\nreturns passed time in seconds.\nreturns passed time in seconds.\nreturns passed time in seconds.\nreturns passed time in seconds.\nreturns counted ticks.\nreturns counted ticks.\nreturns counted ticks.\nreturns counted ticks.\nreturns counted ticks.\nGet OpenCV type from DirectX type\nGet OpenCV type from DirectX type\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess arguments by name\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nAccess positional arguments by index\nretrieve UMat from Mat\nretrieve UMat from Mat\nretrieve UMat from Mat\nretrieve UMat from Mat\nretrieve UMat from Mat\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nretrieve UMat from Mat\nretrieve UMat from Mat\nretrieve UMat from Mat\nretrieve UMat from Mat\nretrieve UMat from Mat\nNote\nNote\nNote\nNote\nNote\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nReturns major library version\nReturns minor library version\nReturns revision field of the library version\nReturns library version string\nRetrieving the result with timeout\nRetrieving the result with timeout\nRetrieving the result with timeout\nRetrieving the result with timeout\nRetrieving the result with timeout\nC++ default parameters\nNote\n! Returns the OpenCL buffer handle on which UMat operates …\n! Returns the OpenCL buffer handle on which UMat operates …\n! Returns the OpenCL buffer handle on which UMat operates …\n! Returns the OpenCL buffer handle on which UMat operates …\n! Returns the OpenCL buffer handle on which UMat operates …\nCheck if field was provided in the command line\nCheck if field was provided in the command line\nCheck if field was provided in the command line\nCheck if field was provided in the command line\nCheck if field was provided in the command line\nThere is a set of methods to check whether the module …\ncomputes the element hash value (1D case)\ncomputes the element hash value (1D case)\ncomputes the element hash value (1D case)\ncomputes the element hash value (1D case)\ncomputes the element hash value (1D case)\ncomputes the element hash value (2D case)\ncomputes the element hash value (2D case)\ncomputes the element hash value (2D case)\ncomputes the element hash value (2D case)\ncomputes the element hash value (2D case)\ncomputes the element hash value (3D case)\ncomputes the element hash value (3D case)\ncomputes the element hash value (3D case)\ncomputes the element hash value (3D case)\ncomputes the element hash value (3D case)\ncomputes the element hash value (nD case)\ncomputes the element hash value (nD case)\ncomputes the element hash value (nD case)\ncomputes the element hash value (nD case)\ncomputes the element hash value (nD case)\nhash value\nhash value\nhash value\nhash value\nhash value\nCheck if use of OpenVX is possible\nApplies horizontal concatenation to given matrices.\nApplies horizontal concatenation to given matrices.\nCalculates the inverse Discrete Cosine Transform of a 1D …\nCalculates the inverse Discrete Cosine Transform of a 1D …\nCalculates the inverse Discrete Fourier Transform of a 1D …\nCalculates the inverse Discrete Fourier Transform of a 1D …\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\nindex of the matrix element\ntrain image index\nChecks if array elements lie between the elements of two …\nmoves iterator to the next node\nmoves iterator to the next node\nmoves iterator to the next node\nmoves iterator to the next node\nmoves iterator to the next node\nincrements the iterator\nincrements the iterator\nincrements the iterator\nincrements the iterator\nincrements the iterator\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nmoves iterator to the next element\nParameters\nParameters\nParameters\nParameters\nCreates OpenCL context from GL.\nCreates OpenCL context from VA.\nCreates OpenCL context from VA.\nInserts a single channel to dst (coi is 0-based index)\ndevice is integrated as opposed to discrete\ndevice is integrated as opposed to discrete\ndevice is integrated as opposed to discrete\ndevice is integrated as opposed to discrete\ndevice is integrated as opposed to discrete\ndeprecated, use isExtensionSupported() method (probably …\ndeprecated, use isExtensionSupported() method (probably …\ndeprecated, use isExtensionSupported() method (probably …\ndeprecated, use isExtensionSupported() method (probably …\ndeprecated, use isExtensionSupported() method (probably …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverses a matrix.\nInverses a matrix.\nInverses a matrix.\nInverses a matrix.\nInverses a matrix.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nInverses a matrix.\nInverses a matrix.\nInverses a matrix.\nInverses a matrix.\nInverses a matrix.\nNote\nNote\nNote\nNote\nNote\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nmatrix inversion by means of matrix expressions\nFinds the inverse or pseudo-inverse of a matrix.\nFinds the inverse or pseudo-inverse of a matrix.\nChecks the CUDA module and device compatibility.\nChecks the CUDA module and device compatibility.\nChecks the CUDA module and device compatibility.\nChecks the CUDA module and device compatibility.\nChecks the CUDA module and device compatibility.\nReports whether the matrix is continuous or not.\nReports whether the matrix is continuous or not.\nReports whether the matrix is continuous or not.\nReports whether the matrix is continuous or not.\nReports whether the matrix is continuous or not.\nreturns true iff the matrix data is continuous\nreturns true iff the matrix data is continuous\nreturns true iff the matrix data is continuous\nreturns true iff the matrix data is continuous\nreturns true iff the matrix data is continuous\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nreturns true iff the GpuMat data is continuous (i.e. when …\nreturns true iff the GpuMat data is continuous (i.e. when …\nreturns true iff the GpuMat data is continuous (i.e. when …\nreturns true iff the GpuMat data is continuous (i.e. when …\nreturns true iff the GpuMat data is continuous (i.e. when …\nreturns true iff the GpuMatND data is continuous (i.e. …\nreturns true iff the GpuMatND data is continuous (i.e. …\nreturns true iff the GpuMatND data is continuous (i.e. …\nreturns true iff the GpuMatND data is continuous (i.e. …\nreturns true iff the GpuMatND data is continuous (i.e. …\nNote\nNote\nNote\nNote\nNote\nIndicates if the image format is supported.\nreturns true if the node is an integer\nreturns true if the node is an integer\nreturns true if the node is an integer\nreturns true if the node is an integer\nreturns true if the node is an integer\nreturns true if the node is a mapping\nreturns true if the node is a mapping\nreturns true if the node is a mapping\nreturns true if the node is a mapping\nreturns true if the node is a mapping\nreturns true if the node has a name\nreturns true if the node has a name\nreturns true if the node has a name\nreturns true if the node has a name\nreturns true if the node has a name\nreturns true if the node is a “none” object\nreturns true if the node is a “none” object\nreturns true if the node is a “none” object\nreturns true if the node is a “none” object\nreturns true if the node is a “none” object\nChecks whether the file is opened.\nChecks whether the file is opened.\nChecks whether the file is opened.\nChecks whether the file is opened.\nChecks whether the file is opened.\nreturns true if the node is a floating-point number\nreturns true if the node is a floating-point number\nreturns true if the node is a floating-point number\nreturns true if the node is a floating-point number\nreturns true if the node is a floating-point number\nreturns true if the node is a sequence\nreturns true if the node is a sequence\nreturns true if the node is a sequence\nreturns true if the node is a sequence\nreturns true if the node is a sequence\nreturns true if the node is a text string\nreturns true if the node is a text string\nreturns true if the node is a text string\nreturns true if the node is a text string\nreturns true if the node is a text string\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nreturns true if the matrix is a submatrix of another matrix\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nreturns true if the matrix is a sub-matrix of another …\nreturns true if the matrix is a sub-matrix of another …\nreturns true if the matrix is a sub-matrix of another …\nreturns true if the matrix is a sub-matrix of another …\nreturns true if the matrix is a sub-matrix of another …\nNote\nNote\nNote\nNote\nNote\nspecified whether there is a run time limit on kernels\nspecified whether there is a run time limit on kernels\nspecified whether there is a run time limit on kernels\nspecified whether there is a run time limit on kernels\nspecified whether there is a run time limit on kernels\nC++ default parameters\nNote\nReturns keys of a mapping node.\nReturns keys of a mapping node.\nReturns keys of a mapping node.\nReturns keys of a mapping node.\nReturns keys of a mapping node.\nFinds centers of clusters and groups input samples around …\nFinds centers of clusters and groups input samples around …\nsize of L2 cache in bytes\nsize of L2 cache in bytes\nsize of L2 cache in bytes\nsize of L2 cache in bytes\nsize of L2 cache in bytes\nline number in the source file where the error has occurred\nline number in the source file where the error has occurred\nline number in the source file where the error has occurred\nline number in the source file where the error has occurred\nline number in the source file where the error has occurred\nDeserializes this object from a given filename.\nDeserializes this object from a given filename.\nDeserializes this object from a given filename.\nDeserializes this object from a given filename.\nDeserializes this object from a given filename.\nDeserializes this object from a given cv::FileStorage.\nDeserializes this object from a given cv::FileStorage.\nDeserializes this object from a given cv::FileStorage.\nDeserializes this object from a given cv::FileStorage.\nDeserializes this object from a given cv::FileStorage.\nLocates the matrix header within a parent matrix.\nLocates the matrix header within a parent matrix.\nLocates the matrix header within a parent matrix.\nLocates the matrix header within a parent matrix.\nLocates the matrix header within a parent matrix.\nlocates matrix header within a parent matrix. See below\nlocates matrix header within a parent matrix. See below\nlocates matrix header within a parent matrix. See below\nlocates matrix header within a parent matrix. See below\nlocates matrix header within a parent matrix. See below\nlocates GpuMat header within a parent GpuMat\nlocates GpuMat header within a parent GpuMat\nlocates GpuMat header within a parent GpuMat\nlocates GpuMat header within a parent GpuMat\nlocates GpuMat header within a parent GpuMat\nCalculates the natural logarithm of every array element.\nproxy for hal::LU\nproxy for hal::LU\nPerforms a look-up table transform of an array.\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nCalculates the magnitude of 2D vectors.\nCalculates the Mahalanobis distance between two vectors.\nmajor compute capability\nmajor compute capability\nmajor compute capability\nmajor compute capability\nmajor compute capability\nmap to device memory (blocking)\nmap to device memory (blocking)\nmap to device memory (blocking)\nmap to device memory (blocking)\nmap to device memory (blocking)\nMaps OpenGL buffer to CUDA device memory.\nMaps OpenGL buffer to CUDA device memory.\nMaps OpenGL buffer to CUDA device memory.\nMaps OpenGL buffer to CUDA device memory.\nMaps OpenGL buffer to CUDA device memory.\nMaps Buffer object to process on CL side (convert to UMat).\nMaps Buffer object to process on CL side (convert to UMat).\nMaps OpenGL buffer to host memory.\nMaps OpenGL buffer to host memory.\nMaps OpenGL buffer to host memory.\nMaps OpenGL buffer to host memory.\nMaps OpenGL buffer to host memory.\nSimplified reading API to use with bindings.\nSimplified reading API to use with bindings.\nSimplified reading API to use with bindings.\nSimplified reading API to use with bindings.\nSimplified reading API to use with bindings.\ndimensional size of the matrix; accessible in various …\ndimensional size of the matrix; accessible in various …\ndimensional size of the matrix; accessible in various …\ndimensional size of the matrix; accessible in various …\ndimensional size of the matrix; accessible in various …\nnumber of bytes each matrix element/row/plane/dimension …\nnumber of bytes each matrix element/row/plane/dimension …\nnumber of bytes each matrix element/row/plane/dimension …\nnumber of bytes each matrix element/row/plane/dimension …\nnumber of bytes each matrix element/row/plane/dimension …\nCalculates per-element maximum of two arrays or an array …\nthe maximum number of iterations/elements\nmaximum size of each dimension of a grid\nmaximum size of each dimension of a grid\nmaximum size of each dimension of a grid\nmaximum size of each dimension of a grid\nmaximum size of each dimension of a grid\nCalculates per-element maximum of two arrays or an array …\nmaximum 1D surface size\nmaximum 1D surface size\nmaximum 1D surface size\nmaximum 1D surface size\nmaximum 1D surface size\nmaximum 1D layered surface dimensions\nmaximum 1D layered surface dimensions\nmaximum 1D layered surface dimensions\nmaximum 1D layered surface dimensions\nmaximum 1D layered surface dimensions\nmaximum 2D surface dimensions\nmaximum 2D surface dimensions\nmaximum 2D surface dimensions\nmaximum 2D surface dimensions\nmaximum 2D surface dimensions\nmaximum 2D layered surface dimensions\nmaximum 2D layered surface dimensions\nmaximum 2D layered surface dimensions\nmaximum 2D layered surface dimensions\nmaximum 2D layered surface dimensions\nmaximum 3D surface dimensions\nmaximum 3D surface dimensions\nmaximum 3D surface dimensions\nmaximum 3D surface dimensions\nmaximum 3D surface dimensions\nmaximum Cubemap surface dimensions\nmaximum Cubemap surface dimensions\nmaximum Cubemap surface dimensions\nmaximum Cubemap surface dimensions\nmaximum Cubemap surface dimensions\nmaximum Cubemap layered surface dimensions\nmaximum Cubemap layered surface dimensions\nmaximum Cubemap layered surface dimensions\nmaximum Cubemap layered surface dimensions\nmaximum Cubemap layered surface dimensions\nmaximum 1D texture size\nmaximum 1D texture size\nmaximum 1D texture size\nmaximum 1D texture size\nmaximum 1D texture size\nmaximum 1D layered texture dimensions\nmaximum 1D layered texture dimensions\nmaximum 1D layered texture dimensions\nmaximum 1D layered texture dimensions\nmaximum 1D layered texture dimensions\nmaximum size for 1D textures bound to linear memory\nmaximum size for 1D textures bound to linear memory\nmaximum size for 1D textures bound to linear memory\nmaximum size for 1D textures bound to linear memory\nmaximum size for 1D textures bound to linear memory\nmaximum 1D mipmapped texture size\nmaximum 1D mipmapped texture size\nmaximum 1D mipmapped texture size\nmaximum 1D mipmapped texture size\nmaximum 1D mipmapped texture size\nmaximum 2D texture dimensions\nmaximum 2D texture dimensions\nmaximum 2D texture dimensions\nmaximum 2D texture dimensions\nmaximum 2D texture dimensions\nmaximum 2D texture dimensions if texture gather operations …\nmaximum 2D texture dimensions if texture gather operations …\nmaximum 2D texture dimensions if texture gather operations …\nmaximum 2D texture dimensions if texture gather operations …\nmaximum 2D texture dimensions if texture gather operations …\nmaximum 2D layered texture dimensions\nmaximum 2D layered texture dimensions\nmaximum 2D layered texture dimensions\nmaximum 2D layered texture dimensions\nmaximum 2D layered texture dimensions\nmaximum dimensions (width, height, pitch) for 2D textures …\nmaximum dimensions (width, height, pitch) for 2D textures …\nmaximum dimensions (width, height, pitch) for 2D textures …\nmaximum dimensions (width, height, pitch) for 2D textures …\nmaximum dimensions (width, height, pitch) for 2D textures …\nmaximum 2D mipmapped texture dimensions\nmaximum 2D mipmapped texture dimensions\nmaximum 2D mipmapped texture dimensions\nmaximum 2D mipmapped texture dimensions\nmaximum 2D mipmapped texture dimensions\nmaximum 3D texture dimensions\nmaximum 3D texture dimensions\nmaximum 3D texture dimensions\nmaximum 3D texture dimensions\nmaximum 3D texture dimensions\nmaximum Cubemap texture dimensions\nmaximum Cubemap texture dimensions\nmaximum Cubemap texture dimensions\nmaximum Cubemap texture dimensions\nmaximum Cubemap texture dimensions\nmaximum Cubemap layered texture dimensions\nmaximum Cubemap layered texture dimensions\nmaximum Cubemap layered texture dimensions\nmaximum Cubemap layered texture dimensions\nmaximum Cubemap layered texture dimensions\nmaximum size of each dimension of a block\nmaximum size of each dimension of a block\nmaximum size of each dimension of a block\nmaximum size of each dimension of a block\nmaximum size of each dimension of a block\nmaximum number of threads per block\nmaximum number of threads per block\nmaximum number of threads per block\nmaximum number of threads per block\nmaximum number of threads per block\nmaximum resident threads per multiprocessor\nmaximum resident threads per multiprocessor\nmaximum resident threads per multiprocessor\nmaximum resident threads per multiprocessor\nmaximum resident threads per multiprocessor\nCalculates per-element maximum of two arrays or an array …\nCalculates an average (mean) of array elements.\nmean value subtracted before the projection and added …\nmean value subtracted before the projection and added …\nmean value subtracted before the projection and added …\nmean value subtracted before the projection and added …\nmean value subtracted before the projection and added …\nCalculates an average (mean) of array elements.\nCalculates a mean and standard deviation of array elements.\nCalculates a mean and standard deviation of array elements.\nmaximum pitch in bytes allowed by memory copies\nmaximum pitch in bytes allowed by memory copies\nmaximum pitch in bytes allowed by memory copies\nmaximum pitch in bytes allowed by memory copies\nmaximum pitch in bytes allowed by memory copies\nglobal memory bus width in bits\nglobal memory bus width in bits\nglobal memory bus width in bits\nglobal memory bus width in bits\nglobal memory bus width in bits\npeak memory clock frequency in kilohertz\npeak memory clock frequency in kilohertz\npeak memory clock frequency in kilohertz\npeak memory clock frequency in kilohertz\npeak memory clock frequency in kilohertz\nCreates one multi-channel array out of several …\nCalculates per-element minimum of two arrays or an array …\nCalculates per-element minimum of two arrays or an array …\nFinds the global minimum and maximum in an array\nFinds the global minimum and maximum in an array\nFinds the global minimum and maximum in an array.\nFinds the global minimum and maximum in an array.\nFinds the global minimum and maximum in an array.\n@overload\nCalculates per-element minimum of two arrays or an array …\nactually runs the algorithm and performs the minimization.\nactually runs the algorithm and performs the minimization.\nactually runs the algorithm and performs the minimization.\nactually runs the algorithm and performs the minimization.\nactually runs the algorithm and performs the minimization.\nminor compute capability\nminor compute capability\nminor compute capability\nminor compute capability\nminor compute capability\nCopies specified channels from input arrays to the …\nCopies specified channels from input arrays to the …\nthe formatted error message\nthe formatted error message\nthe formatted error message\nthe formatted error message\nthe formatted error message\ncentral moments\ncentral moments\ncentral moments\ncentral moments\ncentral moments\ncentral moments\ncentral moments\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nPerforms an element-wise multiplication or division of the …\nNote\nNote\nNote\nNote\nNote\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nper-element matrix multiplication by means of matrix …\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nPerforms the per-element multiplication of two Fourier …\nPerforms the per-element multiplication of two Fourier …\nCalculates the product of a matrix and its transposition.\nCalculates the product of a matrix and its transposition.\nnumber of multiprocessors on device\nnumber of multiprocessors on device\nnumber of multiprocessors on device\nnumber of multiprocessors on device\nnumber of multiprocessors on device\nCalculates the per-element scaled product of two arrays.\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nCalculates the per-element scaled product of two arrays.\nNote\nNote\nNote\nNote\nNote\nreturns the node name or an empty string if the node is …\nreturns the node name or an empty string if the node is …\nreturns the node name or an empty string if the node is …\nreturns the node name or an empty string if the node is …\nreturns the node name or an empty string if the node is …\nASCII string identifying device\nASCII string identifying device\nASCII string identifying device\nASCII string identifying device\nASCII string identifying device\nConstructor\n! Full constructor. Normally the constructor is not called …\nThe constructors.\nThe constructors.\nThe constructors.\nconstructor Initializes a LDA with num_components (default …\nC++ default parameters\n////////////////////////// MatSize …\ndefault constructor\nconstructor\nthe default constructor\nVarious SparseMat constructors.\nthe full constructor setting the iterator to the first …\nthe full constructor setting the iterator to the first …\ndefault constructor\nGets the BufferPool for the given stream.\nThe constructors.\nC++ default parameters\ndefault constructor\ndefault constructor\nC++ default parameters\ncreates a new asynchronous stream with custom allocator\nC++ default parameters\nC++ default parameters\nParameters\nC++ default parameters\nParameters\nC++ default parameters\nThe constructors.\nThe constructors.\nthe full constructor\nfull constructor\nParameters\ndefault constructor\nC++ default parameters\ncreates a new Stream using the cudaFlags argument to …\nC++ default parameters\nThe constructors.\nThe constructors.\nC++ default parameters\nThe constructors.\nThe constructors.\ncreates from host memory with coping data\nThe constructors.\nThe constructors.\nThe constructors.\nThe constructors.\nParameters\nParameters\n@overload @copydoc open()\nconstructor Initializes a LDA with num_components (default …\nNote\n@overload\n@overload initializes an empty SVD structure and then …\ndefault constructor\nNote\ndefault constructor\n@overload\nNote\nNote\nNote\nParameters\nNote\nNote\nNote\n@overload\n@overload\nNote\n@overload\n@overload\nNote\n@overload\n@overload\ncreates from host memory with coping data\n@overload\n@overload\n@overload\n@overload\nThese are various constructors that form a matrix. As …\nconstructs n-dimensional matrix\nconstructs n-dimensional matrix\nThese are various constructors that form a matrix. As …\nThese are various constructors that form a matrix. As …\n@overload\nThese are various constructors that form a matrix. As …\nCreate a new <code>Mat</code> that references a single-dimensional …\nCreate a new <code>Mat</code> that references a single-dimensional …\nThese are various constructors that form a matrix. As …\n@overload\nThese are various constructors that form a matrix. As …\nC++ default parameters\nNote\nParameters\nParameters\nThese are various constructors that form a matrix. As …\nconstructs 2D matrix of the specified size and type\nconstructs GpuMat of the specified size and type\nconstructs 2D matrix of the specified size and type\nconstructs GpuMat of the specified size and type\nCreate a new <code>Mat</code> that references a single-dimensional byte …\nCreate a new mutable <code>Mat</code> that references a …\nCreate a new <code>Mat</code> that references a single-dimensional …\nconstructor for GpuMat headers pointing to user-allocated …\nconstructor for GpuMat headers pointing to user-allocated …\nCreate a new mutable <code>Mat</code> that references a …\nThese are various constructors that form a matrix. As …\n@overload\nThese are various constructors that form a matrix. As …\nconstructs 2D matrix and fills it with the specified value …\nconstructs GpuMat and fills it with the specified value _s\nconstructs 2D matrix and fills it with the specified value …\nconstructs GpuMat and fills it with the specified value _s\nThese are various constructors that form a matrix. As …\nC++ default parameters\nC++ default parameters\nNote\nNote\nCreate a new <code>Mat</code> that references a single-dimensional …\nC++ default parameters\nNote\nCreate a new mutable <code>Mat</code> that references a …\nThese are various constructors that form a matrix. As …\n@overload\nThese are various constructors that form a matrix. As …\nC++ default parameters\nC++ default parameters\nNote\nNote\nInitializes and performs a Discriminant Analysis with …\nInitializes and performs a Discriminant Analysis with …\ndefault constructor\nThe method updates the state using the MWC algorithm and …\nThe method updates the state using the MWC algorithm and …\nThe method updates the state using the MWC algorithm and …\nThe method updates the state using the MWC algorithm and …\nThe method updates the state using the MWC algorithm and …\nindex of the next node in the same hash table entry\nindex of the next node in the same hash table entry\nindex of the next node in the same hash table entry\nindex of the next node in the same hash table entry\nindex of the next node in the same hash table entry\nreturns the current node of the sparse matrix. …\nreturns the current node of the sparse matrix. …\nreturns the current node of the sparse matrix. …\nreturns the current node of the sparse matrix. …\nreturns the current node of the sparse matrix. …\nreturns pointer to the current sparse matrix node. …\nreturns pointer to the current sparse matrix node. …\nreturns pointer to the current sparse matrix node. …\nreturns pointer to the current sparse matrix node. …\nreturns pointer to the current sparse matrix node. …\n/////////// some internal-use methods ///////////////\n/////////// some internal-use methods ///////////////\n/////////// some internal-use methods ///////////////\n/////////// some internal-use methods ///////////////\n/////////// some internal-use methods ///////////////\nCalculates the  absolute norm of an array.\nCalculates an absolute difference norm or a relative …\nCalculates an absolute difference norm or a relative …\nCalculates the  absolute norm of an array.\nCalculates an absolute difference norm or a relative …\nNormalizes the norm or value range of an array.\nNormalizes the norm or value range of an array.\nNormalizes the norm or value range of an array.\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\nreturn Stream object for default CUDA stream\nreturns the number of non-zero elements (=the number of …\nreturns the number of non-zero elements (=the number of …\nreturns the number of non-zero elements (=the number of …\nreturns the number of non-zero elements (=the number of …\nreturns the number of non-zero elements (=the number of …\noctave (pyramid layer) from which the keypoint has been …\noctave (pyramid layer) from which the keypoint has been …\noctave (pyramid layer) from which the keypoint has been …\noctave (pyramid layer) from which the keypoint has been …\noctave (pyramid layer) from which the keypoint has been …\noffset of the submatrix (or 0)\noffset of the submatrix (or 0)\noffset of the submatrix (or 0)\noffset of the submatrix (or 0)\noffset of the submatrix (or 0)\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nNote\nNote\nNote\nNote\nNote\nReturns an array of all 1’s of the specified size and …\nReturns an array of all 1’s of the specified size and …\nReturns an array of all 1’s of the specified size and …\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nOpens a file.\nconstructor that sets the iterator to the beginning of the …\nThis method computes overlap for pair of keypoints. …\nParallel data processor\nParallel data processor\nconverts NaNs to the given number\nconverts NaNs to the given number\nwrap PCA::backProject\nwrap PCA::operator()\nwrap PCA::operator() and add eigenvalues output parameter\nwrap PCA::operator() and add eigenvalues output parameter\nwrap PCA::operator() and add eigenvalues output parameter\nwrap PCA::operator()\nwrap PCA::operator()\nwrap PCA::project\nPCI bus ID of the device\nPCI bus ID of the device\nPCI bus ID of the device\nPCI bus ID of the device\nPCI bus ID of the device\nPCI device ID of the device\nPCI device ID of the device\nPCI device ID of the device\nPCI device ID of the device\nPCI device ID of the device\nPCI domain ID of the device\nPCI domain ID of the device\nPCI domain ID of the device\nPCI domain ID of the device\nPCI domain ID of the device\nPerforms the perspective matrix transformation of vectors.\nCalculates the rotation angle of 2D vectors.\nCalculates the rotation angle of 2D vectors.\nreturns 4 vertices of the rectangle\nCalculates x and y coordinates of 2D vectors from their …\nCalculates x and y coordinates of 2D vectors from their …\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nRemoves elements from the bottom of the matrix.\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nreturns the current iterator position\nRaises every array element to a power.\nC++ default parameters\nNote\nC++ default parameters\nNote\nPrint list of errors occurred\nPrint list of errors occurred\nPrint list of errors occurred\nPrint list of errors occurred\nPrint list of errors occurred\nPrint help message\nPrint help message\nPrint help message\nPrint help message\nPrint help message\nProjects samples into the LDA subspace. src may be one or …\nProjects samples into the LDA subspace. src may be one or …\nProjects samples into the LDA subspace. src may be one or …\nProjects samples into the LDA subspace. src may be one or …\nProjects samples into the LDA subspace. src may be one or …\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nProjects vector(s) to the principal component subspace.\nComputes the Peak Signal-to-Noise Ratio (PSNR) image …\nComputes the Peak Signal-to-Noise Ratio (PSNR) image …\ncoordinates of the keypoints\ncoordinates of the keypoints\ncoordinates of the keypoints\ncoordinates of the keypoints\ncoordinates of the keypoints\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nC++ default parameters\nReturns\nReturns\nReturns\nReturns\nReturns\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\n@overload\n@overload\n@overload\n@overload\n@overload\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nspecialized variants for 1D, 2D, 3D cases and the …\nNote\nNote\nNote\nNote\nNote\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (2D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (3D case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nreturns pointer to the specified element (nD case)\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nreturns pointer to y-th row\nreturns pointer to y-th row\nreturns pointer to y-th row\nreturns pointer to y-th row\nreturns pointer to y-th row\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nreturns pointer to y-th row\nreturns pointer to y-th row\nreturns pointer to y-th row\nreturns pointer to y-th row\nreturns pointer to y-th row\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.\nReturns a pointer to the specified matrix row.")