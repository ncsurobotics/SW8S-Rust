searchState.loadedDescShard("mio_serial", 0, "mio-serial - Serial port I/O for mio\nSpecify to clear both data received and data not yet …\nThe serial port is connected via Bluetooth\nSpecifies which buffer or buffers to purge when calling …\nNumber of bits per character\n8 bits per character\nContains the error value\nAn error type for serial port operations\nCategories of errors that can occur when interacting with …\nParity bit sets even number of 1 bits.\n5 bits per character\nFlow control modes\nFlow control using RTS/CTS signals.\nSpecify to clear data received but not read\nA parameter was incorrect.\nAn I/O error occurred.\nThe device is not available.\nNo parity bit.\nNo flow control.\nParity bit sets odd number of 1 bits.\nContains the success value\nOne stop bit.\nSpecify to clear data written but not yet transmitted\nParity checking modes\nThe serial port is connected via PCI (permanent port)\nA type for results generated by interacting with serial …\nA trait for serial port devices\nA struct containing all serial port settings\nAn extension trait for SerialPortBuilder\nA device-independent implementation of serial port …\nThe physical type of a <code>SerialPort</code>\nSerialStream\n7 bits per character\n6 bits per character\nFlow control using XON/XOFF bytes.\nNumber of stop bits\nTwo stop bits.\nAn unknown error occurred.\nIt can’t be determined how the serial port is connected\nThe serial port is connected via USB\nContains all possible USB information about a <code>SerialPort</code>\nReturns a list of all serial ports on system\nReturns the current baud rate.\nReturns the current baud rate.\nSet the baud rate in symbols-per-second\nGets the number of bytes available to be read from the …\nGets the number of bytes available to be read from the …\nGet the number of bytes written to the output buffer, …\nGet the number of bytes written to the output buffer, …\nDiscards all bytes from the serial driver’s input buffer …\nDiscards all bytes from the serial driver’s input buffer …\nStop transmitting a break\nStop transmitting a break\nReturns the character size.\nReturns the character size.\nSet the number of bits used to represent a character sent …\nA description of the error suitable for end-users\nReturns the exclusivity of the port\nReturns the flow control mode.\nReturns the flow control mode.\nSet the type of signalling to use for controlling data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>ErrorKind</code> for this error.\nThe kind of error this is\nManufacturer (arbitrary string)\nReturns the name of this port if it exists.\nReturn the name associated with the serial port, if known.\nConstruct a builder of <code>SerialPort</code> objects\nInstantiates a new error\nOpen a nonblocking serial port from the provided builder\nOpen a cross-platform interface to the port with the …\nOpen a platform-specific interface to the port with the …\nOpen a platform-specific interface to the port with the …\nOpen a platform-specific interface to the port with the …\nCreate a pair of pseudo serial terminals\nReturns the parity-checking mode.\nReturns the parity-checking mode.\nSet the type of parity to use for error checking\nSet the path to the serial port\nProduct ID\nThe short name of the serial port\nThe hardware device type that exposes this port\nProduct name (arbitrary string)\nReads the state of the Carrier Detect control signal.\nReads the state of the Carrier Detect control signal.\nReads the state of the CTS (Clear To Send) control signal.\nReads the state of the CTS (Clear To Send) control signal.\nReads the state of the Data Set Ready control signal.\nReads the state of the Data Set Ready control signal.\nReads the state of the Ring Indicator control signal.\nReads the state of the Ring Indicator control signal.\nSerial number (arbitrary string)\nSets the baud rate.\nSets the baud rate.\nStart transmitting a break\nStart transmitting a break\nSets the character size.\nSets the character size.\nSets the exclusivity of the port\nSets the flow control mode.\nSets the flow control mode.\nSets the parity-checking mode.\nSets the parity-checking mode.\nSets the number of stop bits.\nSets the number of stop bits.\nSets the timeout for future I/O operations.\nSets the timeout for future I/O operations. This parameter …\nReturns the number of stop bits.\nReturns the number of stop bits.\nSet the number of bits to use to signal the end of a …\nReturns the current timeout.\nReturns the current timeout. This parameter is const and …\nSet the amount of time to wait to receive data before …\nAttempts to clone the <code>SerialPort</code>. This allow you to write …\nCloning is not supported for SerialStream objects\nVendor ID\nWrites to the Data Terminal Ready pin\nWrites to the Data Terminal Ready pin\nSets the state of the RTS (Request To Send) control signal.\nSets the state of the RTS (Request To Send) control signal.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nUnix-specific extensions to the <code>process::Command</code> builder.\nUnix-specific extension methods for <code>fs::DirEntry</code>.\nUnix-specific extensions to <code>process::ExitStatus</code> and …\nUnix-specific extensions to <code>fs::File</code>.\nUnix-specific extensions for <code>fs::FileType</code>.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nUnix-specific extensions to <code>JoinHandle</code>.\nUnix-specific extensions to <code>fs::Metadata</code>.\nA serial port implementation for POSIX TTY ports\nUnix-specific extensions to <code>fs::OpenOptions</code>.\nPlatform-specific extensions to <code>OsStr</code>.\nPlatform-specific extensions to <code>OsString</code>.\nAn owned file descriptor.\nUnix-specific extensions to <code>fs::Permissions</code>.\nRaw file descriptors.\nAdapter for <code>RawFd</code> providing an <code>event::Source</code> …\nSet executable argument\nGets the underlying byte view of the <code>OsStr</code> slice.\nBorrows the file descriptor.\nExtracts the raw pthread_t without taking ownership\nExtracts the raw file descriptor.\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nReturns the port’s baud rate\nSchedules a closure to be run just before the <code>exec</code> …\nReturns the block size for filesystem I/O.\nReturns the number of blocks allocated to the file, in …\nReturn a <code>BorrowedFd</code> holding the given raw file descriptor.\nWhether the process was continued from a stopped status.\nIf the process was terminated by a signal, says whether it …\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nPass custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the ID of the device containing the file.\nReturns the exclusivity of the port\nPerforms all the required setup by this <code>Command</code>, followed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes ownership of a <code>UnixListener</code>’s socket file …\nTakes ownership of a <code>ChildStderr</code>’s file descriptor.\nTakes ownership of a <code>UnixDatagram</code>’s socket file …\nTakes ownership of a <code>File</code>’s underlying file descriptor.\nTakes ownership of a <code>TcpListener</code>’s socket file …\nTakes ownership of a <code>ChildStdout</code>’s file descriptor.\nTakes ownership of a <code>UdpSocket</code>’s file descriptor.\nTakes ownership of a <code>UnixStream</code>’s socket file descriptor.\nTakes ownership of a <code>TcpStream</code>’s socket file descriptor.\nTakes ownership of a <code>ChildStdin</code>’s file descriptor.\nReturns the argument unchanged.\nCreates an <code>OsStr</code> from a byte slice.\nCreates a new instance of <code>Permissions</code> from the given set …\nCreates a new <code>ExitStatus</code> or <code>ExitStatusError</code> from the raw …\nConstructs a new instance of <code>Self</code> from the given raw file …\nConstructs a new instance of <code>Self</code> from the given raw file …\nCreates an <code>OsString</code> from a byte vector.\nReturns the group ID of the owner of this file.\nSimilar to <code>uid</code>, but sets the group ID of the child …\nSets the supplementary group IDs for the calling process. …\nReturns the inode number.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the thread, returning the raw pthread_t\nReturns the underlying raw <code>wait</code> status.\nConsumes this object, returning the raw underlying file …\nYields the underlying byte vector of this <code>OsString</code>.\nReturns <code>true</code> if this file type is a block device.\nReturns <code>true</code> if this file type is a char device.\nReturns <code>true</code> if this file type is a fifo.\nReturns <code>true</code> if this file type is a socket.\nReturns the underlying raw <code>st_mode</code> bits that contain the …\nSets the mode bits that a new file will be created with.\nReturns the rights applied to this file.\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nReturns the number of hard links pointing to this file.\nOpens a TTY device as a serial port.\nCreate a pair of pseudo serial terminals\nSchedules a closure to be run just before the <code>exec</code> …\nSets the process group ID (PGID) of the child process. …\nReturns the device ID of this file (if it is a special …\nReads a number of bytes starting from a given offset.\nReads the exact number of bytes required to fill <code>buf</code> from …\nLike <code>read_at</code>, except that it reads into a slice of buffers.\nSends 0-valued bits over the port for a set duration\nSets the exclusivity of the port\nSets the underlying raw bits for this set of permissions.\nIf the process was terminated by a signal, returns that …\nReturns the total size of this file in bytes.\nIf the process was stopped by a signal, returns that …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nAttempts to clone the <code>SerialPort</code>. This allow you to write …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nReturns the user ID of the owner of this file.\nSets the child process’s user ID. This translates to a …\nAttempts to write an entire buffer starting from a given …\nWrites a number of bytes starting from a given offset.\nLike <code>write_at</code>, except that it writes from a slice of …")