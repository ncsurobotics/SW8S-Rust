searchState.loadedDescShard("opencv", 0, "Core functionality\nDeep Neural Network module\nImage file reading and writing\nImage Processing\nPrelude for generated modules and types\nPrelude for sys (externs) module and types\nConditional compilation macro based on OpenCV branch …\nConditional compilation macro based on OpenCV branch …\nConditional compilation macro based on OpenCV branch …\nConditional compilation macro based on OpenCV branch …\nConditional compilation macro based on OpenCV branch …\nConditional compilation macro based on OpenCV branch …\nReexported platform types that are used by OpenCV\nVideo I/O\nWrapper for the type implementing Boxed trait that allows …\nMutable version of BoxedRef, implements the traits that …\nClones the pointee of this BoxedRef\nClones the pointee of this BoxedRef\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nvalue, open the file for appending\nThe buffer will be used as a source for vertex data\ndocs.opencv.org\nThis is a base class for all more or less complex …\nMutable methods for core::Algorithm\nConstant methods for core::Algorithm\nWrapper for OpenGL Client-Side Vertex arrays.\nMutable methods for core::Arrays\nConstant methods for core::Arrays\nReturns result of asynchronous operations\nMutable methods for core::AsyncArray\nConstant methods for core::AsyncArray\nProvides result of asynchronous operations\nMutable methods for core::AsyncPromise\nConstant methods for core::AsyncPromise\nflag, write rawdata in Base64 by default. (consider using …\n&lt; Event uses blocking synchronization\n<code>iiiiii|abcdefgh|iiiiiii</code>  with some specified <code>i</code>\n<code>iiiiii|abcdefgh|iiiiiii</code>  with some specified <code>i</code>\nsame as BORDER_REFLECT_101\ndo not look outside of ROI\ndo not look outside of ROI\n<code>fedcba|abcdefgh|hgfedcb</code>\n<code>fedcba|abcdefgh|hgfedcb</code>\nsame as BORDER_REFLECT_101\n<code>gfedcb|abcdefgh|gfedcba</code>\n<code>gfedcb|abcdefgh|gfedcba</code>\n<code>aaaaaa|abcdefgh|hhhhhhh</code>\n<code>aaaaaa|abcdefgh|hhhhhhh</code>\n<code>uvwxyz|abcdefgh|ijklmno</code>\n<code>uvwxyz|abcdefgh|ijklmno</code>\n<code>cdefgh|abcdefgh|abcdefg</code>\n<code>cdefgh|abcdefgh|abcdefg</code>\nincorrect input align\nincorrect input align\ninput COI is not supported\ninput COI is not supported\ninput image depth is not supported by the function\ninput image depth is not supported by the function\nimage size is invalid\nimage size is invalid\nbad number of channels, for example, some functions accept …\nbad number of channels, for example, some functions accept …\noffset is invalid\noffset is invalid\nnumber of dimensions is out of range\nnumber of dimensions is out of range\nincorrect input origin\nincorrect input origin\nincorrect input roi\nincorrect input roi\nimage step is wrong, this may happen for a non-continuous …\nimage step is wrong, this may happen for a non-continuous …\nVarious border types, image boundaries are denoted with <code>|</code>\nSmart pointer for OpenGL buffer object with reference …\nBufferPool for use with CUDA streams\nMutable methods for core::BufferPool\nConstant methods for core::BufferPool\nMutable methods for core::Buffer\nConstant methods for core::Buffer\nThe buffer will be used as a source for vertex data\nThe buffer will be used for indices (in glDrawElements, …\nThe buffer will be used for reading from OpenGL textures\nThe buffer will be used for writing to OpenGL textures\nThe target defines how you intend to use the buffer object.\nsrc1 is equal to src2.\nsrc1 is equal to src2.\nsrc1 is greater than or equal to src2.\nsrc1 is greater than or equal to src2.\nsrc1 is greater than src2.\nsrc1 is greater than src2.\nsrc1 is less than or equal to src2.\nsrc1 is less than or equal to src2.\nsrc1 is less than src2.\nsrc1 is less than src2.\nsrc1 is unequal to src2.\nsrc1 is unequal to src2.\nthe maximum number of iterations or elements to compute\nIf the flag is specified, all the input vectors are stored …\nIf the flag is specified, all the input vectors are stored …\nThe output covariance matrix is calculated as: block …\nThe output covariance matrix is calculated as: block …\nIf the flag is specified, all the input vectors are stored …\nIf the flag is specified, all the input vectors are stored …\nIf the flag is specified, the covariance matrix is scaled. …\nIf the flag is specified, the covariance matrix is scaled. …\nThe output covariance matrix is calculated as: block …\nThe output covariance matrix is calculated as: block …\nIf the flag is specified, the function does not calculate …\nIf the flag is specified, the function does not calculate …\nCascade Lake with AVX-512F/CD/BW/DQ/VL/VNNI\nCascade Lake with AVX-512F/CD/BW/DQ/VL/VNNI\nCannon Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI\nCannon Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI\nCommon instructions AVX-512F/CD for all CPUs that support …\nCommon instructions AVX-512F/CD for all CPUs that support …\nIce Lake with …\nIce Lake with …\nKnights Landing with AVX-512F/CD/ER/PF\nKnights Landing with AVX-512F/CD/ER/PF\nKnights Mill with AVX-512F/CD/ER/PF/4FMAPS/4VNNIW/VPOPCNTDQ\nKnights Mill with AVX-512F/CD/ER/PF/4FMAPS/4VNNIW/VPOPCNTDQ\nSkylake-X with AVX-512F/CD/BW/DQ/VL\nSkylake-X with AVX-512F/CD/BW/DQ/VL\ncomparison types\nerror codes\nDesigned for command line parsing\nMutable methods for core::CommandLineParser\nConstant methods for core::CommandLineParser\n&lt; default compute mode (Multiple threads can use …\n&lt; compute-exclusive-thread mode (Only one thread in one …\n&lt; compute-exclusive-process mode (Many threads in one …\n&lt; compute-prohibited mode (No threads can use …\nThis class is used to perform the non-linear …\nMutable methods for core::ConjGradSolver\nConstant methods for core::ConjGradSolver\nMutable methods for core::Context\nConstant methods for core::Context\nMutable methods for core::Context_UserContext\nConstant methods for core::Context_UserContext\nCovariation flags\nAvailable CPU features.\nindicates that the input samples are stored as matrix …\nindicates that the input samples are stored as matrix rows\nperforms an inverse 1D or 2D transform instead of the …\nperforms a forward or inverse transform of every …\nCholesky inline formula factorization; the matrix src1 …\nCholesky inline formula factorization; the matrix src1 …\neigenvalue decomposition; the matrix src1 must be …\neigenvalue decomposition; the matrix src1 must be …\nGaussian elimination with the optimal pivot element chosen.\nGaussian elimination with the optimal pivot element chosen.\nwhile all the previous flags are mutually exclusive, this …\nwhile all the previous flags are mutually exclusive, this …\nQR factorization; the system can be over-defined and/or …\nQR factorization; the system can be over-defined and/or …\nsingular value decomposition (SVD) method; the system can …\nsingular value decomposition (SVD) method; the system can …\n&lt; Default event flag\nDepth\nspecifies that input is complex input. If this flag is …\nspecifies that input is complex input. If this flag is …\nperforms a forward transformation of 1D or 2D real array; …\nperforms a forward transformation of 1D or 2D real array; …\nperforms an inverse 1D or 2D transform instead of the …\nperforms an inverse 1D or 2D transform instead of the …\nperforms an inverse transformation of a 1D or 2D complex …\nperforms an inverse transformation of a 1D or 2D complex …\nperforms a forward or inverse transform of every …\nperforms a forward or inverse transform of every …\nscales the result: divide it by the number of array …\nscales the result: divide it by the number of array …\n&lt; Event will not record timing data\nClass for matching keypoint descriptors\nImplement this trait types that are valid to use as Mat …\nmatrix decomposition types\nMutable methods for core::Detail_CheckContext\nConstant methods for core::Detail_CheckContext\nClass providing functionality for querying the specified …\nMutable methods for core::DeviceInfo\nConstant methods for core::DeviceInfo\n&lt; default compute mode (Multiple threads can use …\n&lt; compute-exclusive-thread mode (Only one thread in one …\n&lt; compute-exclusive-process mode (Many threads in one …\n&lt; compute-prohibited mode (No threads can use …\nMutable methods for core::Device\nConstant methods for core::Device\nThis class is used to perform the non-linear …\nMutable methods for core::DownhillSolver\nConstant methods for core::DownhillSolver\nThe buffer will be used for indices (in glDrawElements, …\nthe desired accuracy or change in parameters at which the …\nremoved: https://github.com/opencv/opencv/pull/17046\nElementwise multiplication\nMutable methods for core::Event\nConstant methods for core::Event\n&lt; Event uses blocking synchronization\n&lt; Default event flag\n&lt; Event will not record timing data\n&lt; Event is suitable for interprocess use. DisableTiming …\n! Class passed to an error.\nMutable methods for core::Exception\nConstant methods for core::Exception\nflag, JSON format\nmask for format flags\nflag, XML format\nflag, YAML format\nwhen the matrix is not square, by default the algorithm …\nEnumeration providing CUDA computing features.\nFile Storage Node class.\nused to iterate through sequences and mappings.\nMutable methods for core::FileNodeIterator\nConstant methods for core::FileNodeIterator\nMutable methods for core::FileNode\nConstant methods for core::FileNode\nempty structure (sequence or mapping)\nsynonym or REAL\ncompact representation of a sequence or mapping. Used only …\nan integer\nmapping\nthe node has a name (i.e. it is element of a mapping).\nempty node\nfloating-point number\nsequence\ntext string in UTF-8 encoding\nsynonym for STR\nif set, means that all the collection elements are numbers …\nXML/YAML/JSON file storage class that encapsulates all the …\nMutable methods for core::FileStorage\nConstant methods for core::FileStorage\nvalue, open the file for appending\nflag, write rawdata in Base64 by default. (consider using …\nflag, auto format\nflag, JSON format\nmask for format flags\nflag, XML format\nflag, YAML format\nflag, read data from source or write data to the internal …\nfile storage mode\nvalue, open the file for reading\nvalue, open the file for writing\nflag, enable both WRITE and BASE64\n@todo document\nMutable methods for core::Formatted\nConstant methods for core::Formatted\n@todo document\nMutable methods for core::Formatter\nConstant methods for core::Formatter\ntransposes src1\ntransposes src1\ntransposes src2\ntransposes src2\ntransposes src3\ntransposes src3\ngeneralized matrix multiplication flags\nGPU API call error\nGPU API call error\nMutable methods for core::GpuData\nConstant methods for core::GpuData\nBase storage class for GPU memory with reference counting.\nMutable methods for core::GpuMatND\nConstant methods for core::GpuMatND\nMutable methods for core::GpuMat\nConstant methods for core::GpuMat\nMutable methods for core::GpuMat_Allocator\nConstant methods for core::GpuMat_Allocator\nno CUDA support\nno CUDA support\nMutable methods for core::Hamming\nConstant methods for core::Hamming\nimage header is NULL\nimage header is NULL\nClass with reference counting wrapping special memory type …\nMutable methods for core::HostMem\nConstant methods for core::HostMem\n&lt; Event is suitable for interprocess use. DisableTiming …\nMutable methods for core::Image2D\nConstant methods for core::Image2D\nUse kmeans++ center initialization by Arthur and …\nUse kmeans++ center initialization by Arthur and …\nSelect random initial centers in each attempt.\nSelect random initial centers in each attempt.\nDuring the first (and possibly the only) attempt, use the …\nDuring the first (and possibly the only) attempt, use the …\nMutable methods for core::KernelArg\nConstant methods for core::KernelArg\nMutable methods for core::Kernel\nConstant methods for core::Kernel\nData structure for salient point detectors.\nMutable methods for core::KeyPoint\nConstant methods for core::KeyPoint\nk-Means flags\nLinear Discriminant Analysis @todo document this class\nMutable methods for core::LDA\nConstant methods for core::LDA\nDebug message. Disabled in the “Release” build.\nDebug message. Disabled in the “Release” build.\nError message\nError message\nFatal (critical) error (unrecoverable internal error)\nFatal (critical) error (unrecoverable internal error)\nInfo message\nInfo message\nfor using in setLogVevel() call\nfor using in setLogVevel() call\nVerbose (trace) messages. Requires verbosity level. …\nVerbose (trace) messages. Requires verbosity level. …\nWarning message\nWarning message\nSupported logging levels and their semantic\nMutable methods for core::LogTag\nConstant methods for core::LogTag\nflag, read data from source or write data to the internal …\nallow the algorithm to modify the decomposed matrix; it …\nn-dimensional dense array class \\anchor CVMat_Details\n/////////////////////////////// MatConstIterator …\nMutable methods for core::MatConstIterator\nConstant methods for core::MatConstIterator\nMatrix expression representation @anchor MatrixExpressions …\nIntermediate result type that’s produced by the Mat …\nMutable methods for core::MatExpr\nConstant methods for core::MatExpr\n////////////////////////////// Matrix Expressions …\nMutable methods for core::MatOp\nConstant methods for core::MatOp\nMutable methods for core::MatSize\nConstant methods for core::MatSize\nMutable methods for core::MatStep\nConstant methods for core::MatStep\nMutable methods for core::Mat\nConstant methods for core::Mat\ndocs.opencv.org\ndocs.opencv.org\n@cond IGNORED\nMutable methods for core::Matx_AddOp\nConstant methods for core::Matx_AddOp\nMutable methods for core::Matx_DivOp\nConstant methods for core::Matx_DivOp\nMutable methods for core::Matx_MatMulOp\nConstant methods for core::Matx_MatMulOp\nMutable methods for core::Matx_MulOp\nConstant methods for core::Matx_MulOp\nMutable methods for core::Matx_ScaleOp\nConstant methods for core::Matx_ScaleOp\nMutable methods for core::Matx_SubOp\nConstant methods for core::Matx_SubOp\nMutable methods for core::Matx_TOp\nConstant methods for core::Matx_TOp\nBasic interface for all solvers\nMutable methods for core::MinProblemSolver\nConstant methods for core::MinProblemSolver\nRepresents function being optimized\nMutable methods for core::MinProblemSolver_Function\nConstant methods for core::MinProblemSolver_Function\nstruct returned by cv::moments\nIn the case of one input array, calculates the Hamming …\nIn the case of one input array, calculates the Hamming …\nSimilar to NORM_HAMMING, but in the calculation, each two …\nSimilar to NORM_HAMMING, but in the calculation, each two …\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nflag\nflag\nflag\nflag\nbit-mask which can be used to separate norm type from norm …\nindicates that only a vector of singular values <code>w</code> is to be …\nMutable methods for core::NodeData\nConstant methods for core::NodeData\nNo value.\nnorm types\nOpenCL API call error\nOpenCL API call error\nMutable methods for core::OpenCLExecutionContext\nConstant methods for core::OpenCLExecutionContext\nOpenCL initialization error\nOpenCL initialization error\nOpenGL API call error\nOpenGL API call error\nno OpenGL support\nno OpenGL support\nPrincipal Component Analysis\nMutable methods for core::PCA\nConstant methods for core::PCA\nindicates that the input samples are stored as matrix …\nindicates that the input samples are stored as matrix rows\nThe buffer will be used for reading from OpenGL textures\nThe buffer will be used for writing to OpenGL textures\nBase class for parallel data processors\nMutable methods for core::ParallelLoopBody\nConstant methods for core::ParallelLoopBody\n@deprecated\nMutable methods for core::PlatformInfo\nConstant methods for core::PlatformInfo\nMutable methods for core::Platform\nConstant methods for core::Platform\ndocs.opencv.org\ndocs.opencv.org\nMutable methods for core::ProgramSource\nConstant methods for core::ProgramSource\nMutable methods for core::Program\nConstant methods for core::Program\nThis is similar to Rust <code>Arc</code>, but handled by the C++. Some …\nMutable methods for core::Queue\nConstant methods for core::Queue\nvalue, open the file for reading\nthe output is the mean vector of all rows/columns of the …\nthe output is the mean vector of all rows/columns of the …\nthe output is the maximum (column/row-wise) of all …\nthe output is the maximum (column/row-wise) of all …\nthe output is the minimum (column/row-wise) of all …\nthe output is the minimum (column/row-wise) of all …\nthe output is the sum of all rows/columns of the matrix.\nthe output is the sum of all rows/columns of the matrix.\nRed, Green, Blue\nRed, Green, Blue, Alpha\nRandom Number Generator\nMutable methods for core::RNG\nConstant methods for core::RNG\nMersenne Twister random number generator\nMutable methods for core::RNG_MT19937\nConstant methods for core::RNG_MT19937\nRotate 180 degrees clockwise\nRotate 180 degrees clockwise\nRotate 90 degrees clockwise\nRotate 90 degrees clockwise\nRotate 270 degrees clockwise\nRotate 270 degrees clockwise\nTemplate class specifying a continuous subsequence (slice) …\nMutable methods for core::Range\nConstant methods for core::Range\ndocs.opencv.org\nrender mode\nThe class represents rotated (i.e. not up-right) …\nthere are multiple maxima for target function - the …\nthere are multiple maxima for target function - the …\nthere is only one maximum for target function\nthere is only one maximum for target function\nproblem is unbounded (target function can achieve …\nproblem is unbounded (target function can achieve …\nproblem is unfeasible (there are no points that satisfy …\nproblem is unfeasible (there are no points that satisfy …\neach matrix row is sorted in the ascending order.\neach matrix row is sorted in the descending order; this …\neach matrix row is sorted in the descending order; this …\neach matrix column is sorted independently; this flag and …\neach matrix column is sorted independently; this flag and …\neach matrix row is sorted independently\neach matrix row is sorted independently\nremoved: https://github.com/opencv/opencv/issues/18897\nSingular Value Decomposition\nMutable methods for core::SVD\nConstant methods for core::SVD\nwhen the matrix is not square, by default the algorithm …\nallow the algorithm to modify the decomposed matrix; it …\nindicates that only a vector of singular values <code>w</code> is to be …\ndocs.opencv.org\ndocs.opencv.org\nreturn codes for cv::solveLP() function\nSome value of type <code>T</code>.\nThe class SparseMat represents multi-dimensional sparse …\nRead-Only Sparse Matrix Iterator.\nMutable methods for core::SparseMatConstIterator\nConstant methods for core::SparseMatConstIterator\nRead-write Sparse Matrix Iterator\nMutable methods for core::SparseMatIterator\nConstant methods for core::SparseMatIterator\nMutable methods for core::SparseMat\nConstant methods for core::SparseMat\nthe sparse matrix header\nMutable methods for core::SparseMat_Hdr\nConstant methods for core::SparseMat_Hdr\nsparse matrix node - element of a hash table\nMutable methods for core::SparseMat_Node\nConstant methods for core::SparseMat_Node\nThis class encapsulates a queue of asynchronous calls.\nMutable methods for core::Stream\nConstant methods for core::Stream\nassertion failed\nassertion failed\ntracing\ntracing\npseudo error for back trace\npseudo error for back trace\nfunction arg/param is bad\nfunction arg/param is bad\nflag is wrong or not supported\nflag is wrong or not supported\nunsupported function\nunsupported function\nbad format of mask (neither 8uC1 nor 8sC1)\nbad format of mask (neither 8uC1 nor 8sC1)\nan allocated block has been corrupted\nan allocated block has been corrupted\nbad CvPoint\nbad CvPoint\nthe input/output structure size is incorrect\nthe input/output structure size is incorrect\ndivision by zero\ndivision by zero\nunknown /unspecified error\nunknown /unspecified error\nincorrect filter offset value\nincorrect filter offset value\nincorrect filter structure content\nincorrect filter structure content\nin-place operation is not supported\nin-place operation is not supported\ninternal error (bad state)\ninternal error (bad state)\nincorrect transform kernel content\nincorrect transform kernel content\niteration didn’t converge\niteration didn’t converge\ninsufficient memory\ninsufficient memory\nthe requested function/feature is not implemented\nthe requested function/feature is not implemented\nnull pointer\nnull pointer\nrequest can’t be completed\nrequest can’t be completed\neverything is ok\neverything is ok\nsome of parameters are out of range\nsome of parameters are out of range\ninvalid syntax/structure of the parsed file\ninvalid syntax/structure of the parsed file\nformats of input/output arrays differ\nformats of input/output arrays differ\nsizes of input/output structures do not match\nsizes of input/output structures do not match\nthe data format/type is not supported by the function\nthe data format/type is not supported by the function\nincorrect vector length\nincorrect vector length\nClass providing a set of static methods to check what …\nMutable methods for core::TargetArchs\nConstant methods for core::TargetArchs\nThe class defining termination criteria for iterative …\nthe maximum number of iterations or elements to compute\nthe desired accuracy or change in parameters at which the …\nditto\nCriteria type, can be one of: COUNT, EPS or COUNT + EPS\nSmart pointer for OpenGL 2D texture memory with reference …\nMutable methods for core::Texture2D\nConstant methods for core::Texture2D\nDepth\nAn Image Format describes the way that the images in …\nRed, Green, Blue\nRed, Green, Blue, Alpha\na Class to measure passing time.\nMutable methods for core::TickMeter\nConstant methods for core::TickMeter\nMutable methods for core::Timer\nConstant methods for core::Timer\nTrait to serve as a replacement for <code>InputArray</code> in C++ …\nTrait to serve as a replacement for <code>InputOutputArray</code> in …\nTrait to serve as a replacement for <code>OutputArray</code> in C++ …\nWrapper for C++ std::tupe and std::pair\n@todo document\nMutable methods for core::UMatData\nConstant methods for core::UMatData\nMutable methods for core::UMat\nConstant methods for core::UMat\nUsage flags for allocator\nShorter aliases for the most popular specializations of Vec…\ndocs.opencv.org Named <code>VecN</code> to avoid name clash with std’…\nWrapper for C++ std::vector\nvalue, open the file for writing\nflag, enable both WRITE and BASE64\nMutable methods for core::WriteStructContext\nConstant methods for core::WriteStructContext\nThis is the proxy class for passing read-only input arrays …\nMutable methods for core::_InputArray\nConstant methods for core::_InputArray\nremoved: https://github.com/opencv/opencv/pull/17046\nremoved: https://github.com/opencv/opencv/issues/18897\nMutable methods for core::_InputOutputArray\nConstant methods for core::_InputOutputArray\nThis type is very similar to InputArray except that it is …\nMutable methods for core::_OutputArray\nConstant methods for core::_OutputArray\nCalculates an absolute value of each matrix element.\nCalculates an absolute value of each matrix element.\nCalculates the per-element absolute difference between two …\nCalculates the per-element sum of two arrays or an array …\nCalculates the per-element sum of two arrays or an array …\n@relates cv::MatExpr\nOverride search data path by adding new search location\nAppend samples search data sub directory\nCalculates the weighted sum of two arrays.\nCalculates the weighted sum of two arrays.\nreturns the rotation angle. When the angle is 0, 90, 180, …\nAttaches OpenCL context to OpenCV\nnaive nearest neighbor finder\nnaive nearest neighbor finder\ncomputes bitwise conjunction of the two arrays (dst = src1 …\ncomputes bitwise conjunction of the two arrays (dst = src1 …\nInverts every bit of an array.\nInverts every bit of an array.\nCalculates the per-element bit-wise disjunction of two …\nCalculates the per-element bit-wise disjunction of two …\nCalculates the per-element bit-wise “exclusive or” …\nCalculates the per-element bit-wise “exclusive or” …\nComputes the source location of an extrapolated pixel.\nCalculates the covariance matrix of a set of vectors.\n@overload\nCalculates the magnitude and angle of 2D vectors.\nCalculates the magnitude and angle of 2D vectors.\nreturns the rectangle mass center\nReturns true if the specified feature is supported by the …\nC++ default parameters\nNote\nChecks every element of an input array for invalid values.\nChecks every element of an input array for invalid values.\nproxy for hal::Cholesky\nproxy for hal::Cholesky\nPerforms the per-element comparison of two arrays or an …\nCopies the lower or the upper half of a square matrix to …\nCopies the lower or the upper half of a square matrix to …\nConverts an array to half precision floating number.\nConvert OpenCL buffer to UMat\nParameters\nParameters\nParameters\nParameters\nConverts Texture2D object to OutputArray.\nConvert OpenCL image2d_t to UMat\nConverts VASurfaceID object to OutputArray.\nScales, calculates absolute values, and converts the …\nScales, calculates absolute values, and converts the …\nParameters\nParameters\nParameters\nParameters\nConverts InputArray to Texture2D object.\nConverts InputArray to VASurfaceID object.\nForms a border around an image.\nForms a border around an image.\nThis is an overloaded member function, provided for …\nCounts non-zero array elements.\nCreates a continuous matrix.\nComputes the cube root of an argument.\nPerforms a forward or inverse discrete Cosine transform of …\nPerforms a forward or inverse discrete Cosine transform of …\nReturns string of cv::Mat depth value: CV_8U -&gt; “CV_8U”…\nReturns the determinant of a square floating-point matrix.\nchecks whether current device supports the given feature\nPerforms a forward or inverse Discrete Fourier transform …\nPerforms a forward or inverse Discrete Fourier transform …\nPerforms per-element division of two arrays or a scalar by …\nPerforms per-element division of two arrays or a scalar by …\nPerforms per-element division of two arrays or a scalar by …\n@overload\nCalculates eigenvalues and eigenvectors of a symmetric …\nCalculates eigenvalues and eigenvectors of a symmetric …\nCalculates eigenvalues and eigenvectors of a non-symmetric …\nEnsures that the size of a matrix is big enough and the …\nthe desired accuracy\n@relates cv::FileNodeIterator\n! Signals an error and raises the exception.\n! Signals an error and raises the exception.\nCalculates the exponent of every array element.\nExtracts a single channel from src (coi is 0-based index)\nCalculates the angle of a 2D vector in degrees.\nTry to find requested data file\nTry to find requested data file\nC++ default parameters\nNote\nReturns the list of locations of non-zero pixels\nFlips a 2D array around vertical, horizontal, or both axes.\nPerforms generalized matrix multiplication.\nPerforms generalized matrix multiplication.\nReturns full configuration time cmake output.\nReturns list of CPU features enabled during compilation.\nReturns the number of CPU ticks.\nReturns the number of installed CUDA-enabled devices.\nReturns the current device index set by cuda::setDevice or …\nGet global log tag\nReturns feature name by ID\nGet global logging level\nReturns the number of threads used by OpenCV for parallel …\nReturns the number of logical CPUs available for the …\nReturns the optimal DFT size for a given vector size.\nReturns the index of the currently executed thread within …\nReturns the number of ticks.\nReturns the number of ticks per second.\nGet OpenCV type from DirectX type\nGet OpenCV type from DirectX type\nReturns major library version\nReturns minor library version\nReturns revision field of the library version\nReturns library version string\nC++ default parameters\nNote\nCheck if use of OpenVX is possible\nApplies horizontal concatenation to given matrices.\nApplies horizontal concatenation to given matrices.\nCalculates the inverse Discrete Cosine Transform of a 1D …\nCalculates the inverse Discrete Cosine Transform of a 1D …\nCalculates the inverse Discrete Fourier Transform of a 1D …\nCalculates the inverse Discrete Fourier Transform of a 1D …\ntrain image index\nChecks if array elements lie between the elements of two …\nParameters\nParameters\nParameters\nParameters\nCreates OpenCL context from GL.\nCreates OpenCL context from VA.\nCreates OpenCL context from VA.\nInserts a single channel to dst (coi is 0-based index)\nFinds the inverse or pseudo-inverse of a matrix.\nFinds the inverse or pseudo-inverse of a matrix.\nC++ default parameters\nNote\nFinds centers of clusters and groups input samples around …\nFinds centers of clusters and groups input samples around …\nCalculates the natural logarithm of every array element.\nproxy for hal::LU\nproxy for hal::LU\nPerforms a look-up table transform of an array.\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nspatial moments\nCalculates the magnitude of 2D vectors.\nCalculates the Mahalanobis distance between two vectors.\nMaps Buffer object to process on CL side (convert to UMat).\nMaps Buffer object to process on CL side (convert to UMat).\nCalculates per-element maximum of two arrays or an array …\nthe maximum number of iterations/elements\nCalculates per-element maximum of two arrays or an array …\nCalculates per-element maximum of two arrays or an array …\nCalculates an average (mean) of array elements.\nCalculates an average (mean) of array elements.\nCalculates a mean and standard deviation of array elements.\nCalculates a mean and standard deviation of array elements.\nCreates one multi-channel array out of several …\nCalculates per-element minimum of two arrays or an array …\nCalculates per-element minimum of two arrays or an array …\nFinds the global minimum and maximum in an array\nFinds the global minimum and maximum in an array\nFinds the global minimum and maximum in an array.\nFinds the global minimum and maximum in an array.\nFinds the global minimum and maximum in an array.\n@overload\nCalculates per-element minimum of two arrays or an array …\nCopies specified channels from input arrays to the …\nCopies specified channels from input arrays to the …\nHelper function to call OpenCV functions that allow …\ncentral moments\ncentral moments\ncentral moments\ncentral moments\ncentral moments\ncentral moments\ncentral moments\nPerforms the per-element multiplication of two Fourier …\nPerforms the per-element multiplication of two Fourier …\nCalculates the product of a matrix and its transposition.\nCalculates the product of a matrix and its transposition.\nCalculates the per-element scaled product of two arrays.\nCalculates the per-element scaled product of two arrays.\nCalculates the  absolute norm of an array.\nCalculates an absolute difference norm or a relative …\nCalculates an absolute difference norm or a relative …\nCalculates the  absolute norm of an array.\nCalculates an absolute difference norm or a relative …\nNormalizes the norm or value range of an array.\nNormalizes the norm or value range of an array.\nNormalizes the norm or value range of an array.\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\ncentral normalized moments\nAmount of layers/channels per element. E.g. for an 8-bit …\nThe shape of bytes occupied by the single layer/channel of …\nParallel data processor\nParallel data processor\nconverts NaNs to the given number\nconverts NaNs to the given number\nwrap PCA::backProject\nwrap PCA::operator()\nwrap PCA::operator() and add eigenvalues output parameter\nwrap PCA::operator() and add eigenvalues output parameter\nwrap PCA::operator() and add eigenvalues output parameter\nwrap PCA::operator()\nwrap PCA::operator()\nwrap PCA::project\nPerforms the perspective matrix transformation of vectors.\nCalculates the rotation angle of 2D vectors.\nCalculates the rotation angle of 2D vectors.\nCalculates x and y coordinates of 2D vectors from their …\nCalculates x and y coordinates of 2D vectors from their …\nRaises every array element to a power.\nC++ default parameters\nNote\nC++ default parameters\nNote\nComputes the Peak Signal-to-Noise Ratio (PSNR) image …\nComputes the Peak Signal-to-Noise Ratio (PSNR) image …\nquery descriptor index\nShuffles the array elements randomly.\nShuffles the array elements randomly.\nFills the array with normally distributed random numbers.\nGenerates a single uniformly-distributed random number or …\n@relates cv::FileNode\nC++ default parameters\nNote\nC++ default parameters\nNote\nReduces a matrix to a vector.\nReduces a matrix to a vector.\nPage-locks the memory of matrix and maps it for the …\nRender OpenGL texture or primitives.\nRender OpenGL texture or primitives.\n@overload\nRender OpenGL texture or primitives.\n@overload\nRender OpenGL texture or primitives.\nFills the output array with repeated copies of the input …\nFills the output array with repeated copies of the input …\nExplicitly destroys and cleans up all resources associated …\nRotates a 2D array in multiples of 90 degrees. The …\nCalculates the sum of a scaled array and another array.\nSets/resets the break-on-error mode.\nBufferPool management (must be called before Stream …\nSets a device and initializes it for the current thread.\nSets a CUDA device and initializes it for the current …\nSets a CUDA device and initializes it for the current …\nInitializes a scaled identity matrix.\nInitializes a scaled identity matrix.\nC++ default parameters\nNote\nSet global logging level\n@cond IGNORED\nOpenCV will try to set the number of threads for the next …\nSets state of default random number generator.\nEnable/disable use of OpenVX\nEnables or disables the optimized code.\nreturns width and height of the rectangle\nSolves one or more linear systems or least-squares …\nFinds the real roots of a cubic equation.\nSolves one or more linear systems or least-squares …\nSolve given (non-integer) linear programming problem using …\nFinds the real or complex roots of a polynomial equation.\nFinds the real or complex roots of a polynomial equation.\nSorts each row or each column of a matrix.\nSorts each row or each column of a matrix.\nDivides a multi-channel array into several single-channel …\nDivides a multi-channel array into several single-channel …\nCalculates a square root of array elements.\nCalculates the per-element difference between two arrays …\nCalculates the per-element difference between two arrays …\nCalculates the sum of array elements.\nwrap SVD::backSubst\nwrap SVD::compute\nwrap SVD::compute\nSwaps two matrices\nSwaps two matrices\nC++ default parameters\nNote\nC++ default parameters\nNote\nC++ default parameters\nNote\nReturns the default random number generator.\nConvert <code>Vector</code> to <code>Vec</code>\nReturns the trace of a matrix.\ntrain descriptor index\nPerforms the matrix transformation of every array element.\nTransposes a matrix.\nthe type of termination criteria: COUNT, EPS or COUNT + EPS\nReturns string of cv::Mat depth value: CV_8UC3 -&gt; “…\nUnmaps Buffer object (releases UMat, previously mapped …\nUnmaps the memory of matrix and makes it pageable again.\nCheck if use of OpenVX is enabled\nReturns the status of optimized code usage.\nApplies vertical concatenation to given matrices.\nApplies vertical concatenation to given matrices.\n@relates cv::FileStorage\nWrite log message\nWrite log message\nMutable methods for core::Algorithm\nConstant methods for core::Algorithm\nMutable methods for core::Arrays\nConstant methods for core::Arrays\nMutable methods for core::AsyncArray\nConstant methods for core::AsyncArray\nMutable methods for core::AsyncPromise\nConstant methods for core::AsyncPromise\nMutable methods for core::BufferPool\nConstant methods for core::BufferPool\nMutable methods for core::Buffer\nConstant methods for core::Buffer\nMutable methods for core::CommandLineParser\nConstant methods for core::CommandLineParser\nMutable methods for core::ConjGradSolver\nConstant methods for core::ConjGradSolver\nMutable methods for core::Context\nConstant methods for core::Context\nMutable methods for core::Context_UserContext\nConstant methods for core::Context_UserContext\nMutable methods for core::Detail_CheckContext\nConstant methods for core::Detail_CheckContext\nMutable methods for core::DeviceInfo\nConstant methods for core::DeviceInfo\nMutable methods for core::Device\nConstant methods for core::Device\nMutable methods for core::DownhillSolver\nConstant methods for core::DownhillSolver\nMutable methods for core::Event\nConstant methods for core::Event\nMutable methods for core::Exception\nConstant methods for core::Exception\nMutable methods for core::FileNodeIterator\nConstant methods for core::FileNodeIterator\nMutable methods for core::FileNode\nConstant methods for core::FileNode\nMutable methods for core::FileStorage\nConstant methods for core::FileStorage\nMutable methods for core::Formatted\nConstant methods for core::Formatted\nMutable methods for core::Formatter\nConstant methods for core::Formatter\nMutable methods for core::GpuData\nConstant methods for core::GpuData\nMutable methods for core::GpuMatND\nConstant methods for core::GpuMatND\nMutable methods for core::GpuMat\nConstant methods for core::GpuMat\nMutable methods for core::GpuMat_Allocator\nConstant methods for core::GpuMat_Allocator\nMutable methods for core::Hamming\nConstant methods for core::Hamming\nMutable methods for core::HostMem\nConstant methods for core::HostMem\nMutable methods for core::Image2D\nConstant methods for core::Image2D\nMutable methods for core::KernelArg\nConstant methods for core::KernelArg\nMutable methods for core::Kernel\nConstant methods for core::Kernel\nMutable methods for core::KeyPoint\nConstant methods for core::KeyPoint\nMutable methods for core::LDA\nConstant methods for core::LDA\nMutable methods for core::LogTag\nConstant methods for core::LogTag\nMutable methods for core::MatConstIterator\nConstant methods for core::MatConstIterator\nMutable methods for core::MatExpr\nConstant methods for core::MatExpr\nMutable methods for core::MatOp\nConstant methods for core::MatOp\nMutable methods for core::MatSize\nConstant methods for core::MatSize\nMutable methods for core::MatStep\nConstant methods for core::MatStep\nMutable methods for core::Mat\nConstant methods for core::Mat\nMutable methods for core::Matx_AddOp\nConstant methods for core::Matx_AddOp\nMutable methods for core::Matx_DivOp\nConstant methods for core::Matx_DivOp\nMutable methods for core::Matx_MatMulOp\nConstant methods for core::Matx_MatMulOp\nMutable methods for core::Matx_MulOp\nConstant methods for core::Matx_MulOp\nMutable methods for core::Matx_ScaleOp\nConstant methods for core::Matx_ScaleOp\nMutable methods for core::Matx_SubOp\nConstant methods for core::Matx_SubOp\nMutable methods for core::Matx_TOp\nConstant methods for core::Matx_TOp\nMutable methods for core::MinProblemSolver\nConstant methods for core::MinProblemSolver\nMutable methods for core::MinProblemSolver_Function\nConstant methods for core::MinProblemSolver_Function\nMutable methods for core::NodeData\nConstant methods for core::NodeData\nMutable methods for core::OpenCLExecutionContext\nConstant methods for core::OpenCLExecutionContext\nMutable methods for core::PCA\nConstant methods for core::PCA\nMutable methods for core::ParallelLoopBody\nConstant methods for core::ParallelLoopBody\nMutable methods for core::PlatformInfo\nConstant methods for core::PlatformInfo\nMutable methods for core::Platform\nConstant methods for core::Platform\nMutable methods for core::ProgramSource\nConstant methods for core::ProgramSource\nMutable methods for core::Program\nConstant methods for core::Program\nMutable methods for core::Queue\nConstant methods for core::Queue\nMutable methods for core::RNG\nConstant methods for core::RNG\nMutable methods for core::RNG_MT19937\nConstant methods for core::RNG_MT19937\nMutable methods for core::Range\nConstant methods for core::Range\nMutable methods for core::SVD\nConstant methods for core::SVD\nMutable methods for core::SparseMatConstIterator\nConstant methods for core::SparseMatConstIterator\nMutable methods for core::SparseMatIterator\nConstant methods for core::SparseMatIterator\nMutable methods for core::SparseMat\nConstant methods for core::SparseMat\nMutable methods for core::SparseMat_Hdr\nConstant methods for core::SparseMat_Hdr\nMutable methods for core::SparseMat_Node\nConstant methods for core::SparseMat_Node\nMutable methods for core::Stream\nConstant methods for core::Stream\nMutable methods for core::TargetArchs\nConstant methods for core::TargetArchs\nMutable methods for core::Texture2D\nConstant methods for core::Texture2D\nMutable methods for core::TickMeter\nConstant methods for core::TickMeter\nMutable methods for core::Timer\nConstant methods for core::Timer\nMutable methods for core::UMatData\nConstant methods for core::UMatData\nMutable methods for core::UMat\nConstant methods for core::UMat\nMutable methods for core::WriteStructContext\nConstant methods for core::WriteStructContext\nMutable methods for core::_InputArray\nConstant methods for core::_InputArray\nMutable methods for core::_InputOutputArray\nConstant methods for core::_InputOutputArray\nMutable methods for core::_OutputArray\nConstant methods for core::_OutputArray\nMutable methods for crate::dnn::AbsLayer\nConstant methods for crate::dnn::AbsLayer\nMutable methods for crate::dnn::AccumLayer\nConstant methods for crate::dnn::AccumLayer\nMutable methods for crate::dnn::ActivationLayerInt8\nConstant methods for crate::dnn::ActivationLayerInt8\nMutable methods for crate::dnn::ActivationLayer\nConstant methods for crate::dnn::ActivationLayer\nMutable methods for crate::dnn::BNLLLayer\nConstant methods for crate::dnn::BNLLLayer\nEnum of computation backends supported by layers.\nDerivatives of this class encapsulates functions of …\nMutable methods for crate::dnn::BackendNode\nConstant methods for crate::dnn::BackendNode\nDerivatives of this class wraps cv::Mat for different …\nMutable methods for crate::dnn::BackendWrapper\nConstant methods for crate::dnn::BackendWrapper\nMutable methods for crate::dnn::BaseConvolutionLayer\nConstant methods for crate::dnn::BaseConvolutionLayer\nMutable methods for crate::dnn::BatchNormLayerInt8\nConstant methods for crate::dnn::BatchNormLayerInt8\nMutable methods for crate::dnn::BatchNormLayer\nConstant methods for crate::dnn::BatchNormLayer\nPartial List of Implemented Layers\nMutable methods for crate::dnn::BlankLayer\nConstant methods for crate::dnn::BlankLayer\nMutable methods for crate::dnn::ChannelsPReLULayer\nConstant methods for crate::dnn::ChannelsPReLULayer\nThis class represents high-level API for classification …\nMutable methods for crate::dnn::ClassificationModel\nConstant methods for crate::dnn::ClassificationModel\nMutable methods for crate::dnn::ConcatLayer\nConstant methods for crate::dnn::ConcatLayer\nConstant layer produces the same data blob at an every …\nMutable methods for crate::dnn::ConstLayer\nConstant methods for crate::dnn::ConstLayer\nMutable methods for crate::dnn::ConvolutionLayerInt8\nConstant methods for crate::dnn::ConvolutionLayerInt8\nMutable methods for crate::dnn::ConvolutionLayer\nConstant methods for crate::dnn::ConvolutionLayer\nMutable methods for crate::dnn::CorrelationLayer\nConstant methods for crate::dnn::CorrelationLayer\nMutable methods for crate::dnn::CropAndResizeLayer\nConstant methods for crate::dnn::CropAndResizeLayer\nMutable methods for crate::dnn::CropLayer\nConstant methods for crate::dnn::CropLayer\nMutable methods for crate::dnn::CumSumLayer\nConstant methods for crate::dnn::CumSumLayer\nDNN_BACKEND_DEFAULT equals to DNN_BACKEND_INFERENCE_ENGINE …\nDNN_BACKEND_DEFAULT equals to DNN_BACKEND_INFERENCE_ENGINE …\nDNN_BACKEND_DEFAULT equals to DNN_BACKEND_INFERENCE_ENGINE …\nDNN_BACKEND_DEFAULT equals to DNN_BACKEND_INFERENCE_ENGINE …\nIntel’s Inference Engine computational backend\nIntel’s Inference Engine computational backend\nFPGA device with CPU fallbacks using Inference Engine’s …\nFPGA device with CPU fallbacks using Inference Engine’s …\nMutable methods for crate::dnn::DataAugmentationLayer\nConstant methods for crate::dnn::DataAugmentationLayer\nMutable methods for crate::dnn::DeconvolutionLayer\nConstant methods for crate::dnn::DeconvolutionLayer\nMutable methods for crate::dnn::DequantizeLayer\nConstant methods for crate::dnn::DequantizeLayer\nThis class represents high-level API for object detection …\nMutable methods for crate::dnn::DetectionModel\nConstant methods for crate::dnn::DetectionModel\nDetection output layer.\nMutable methods for crate::dnn::DetectionOutputLayer\nConstant methods for crate::dnn::DetectionOutputLayer\nThis class implements name-value dictionary, values are …\nMutable methods for crate::dnn::Dict\nConstant methods for crate::dnn::Dict\nThis struct stores the scalar value (or array) of one of …\nMutable methods for crate::dnn::DictValue\nConstant methods for crate::dnn::DictValue\nMutable methods for crate::dnn::ELULayer\nConstant methods for crate::dnn::ELULayer\nElement wise operation on inputs\nMutable methods for crate::dnn::EltwiseLayerInt8\nConstant methods for crate::dnn::EltwiseLayerInt8\nMutable methods for crate::dnn::EltwiseLayer\nConstant methods for crate::dnn::EltwiseLayer\nMutable methods for crate::dnn::ExpLayer\nConstant methods for crate::dnn::ExpLayer\nMutable methods for crate::dnn::FlattenLayer\nConstant methods for crate::dnn::FlattenLayer\nMutable methods for crate::dnn::FlowWarpLayer\nConstant methods for crate::dnn::FlowWarpLayer\nGRU recurrent one-layer\nMutable methods for crate::dnn::GRULayer\nConstant methods for crate::dnn::GRULayer\nMutable methods for crate::dnn::InnerProductLayerInt8\nConstant methods for crate::dnn::InnerProductLayerInt8\nMutable methods for crate::dnn::InnerProductLayer\nConstant methods for crate::dnn::InnerProductLayer\nBilinear resize layer from …\nMutable methods for crate::dnn::InterpLayer\nConstant methods for crate::dnn::InterpLayer\nThis class represents high-level API for keypoints models\nMutable methods for crate::dnn::KeypointsModel\nConstant methods for crate::dnn::KeypointsModel\nMutable methods for crate::dnn::LRNLayer\nConstant methods for crate::dnn::LRNLayer\nLSTM recurrent layer\nMutable methods for crate::dnn::LSTMLayer\nConstant methods for crate::dnn::LSTMLayer\nThis interface class allows to build new Layers - are …\n%Layer factory allows to create instances of registered …\nMutable methods for crate::dnn::LayerFactory\nConstant methods for crate::dnn::LayerFactory\nEach Layer class must provide this function to the factory\nThis class provides all data needed to initialize layer.\nMutable methods for crate::dnn::LayerParams\nConstant methods for crate::dnn::LayerParams\nMutable methods for crate::dnn::Layer\nConstant methods for crate::dnn::Layer\nMutable methods for crate::dnn::MVNLayer\nConstant methods for crate::dnn::MVNLayer\nMutable methods for crate::dnn::MaxUnpoolLayer\nConstant methods for crate::dnn::MaxUnpoolLayer\nMutable methods for crate::dnn::MishLayer\nConstant methods for crate::dnn::MishLayer\nThis class is presented high-level API for neural networks.\nMutable methods for crate::dnn::Model\nConstant methods for crate::dnn::Model\nThis class allows to create and manipulate comprehensive …\nMutable methods for crate::dnn::Net\nConstant methods for crate::dnn::Net\nContainer for strings and integers.\nNo value.\ninline formula - normalization layer.\nMutable methods for crate::dnn::NormalizeBBoxLayer\nConstant methods for crate::dnn::NormalizeBBoxLayer\nAdds extra values for specific axes.\nMutable methods for crate::dnn::PaddingLayer\nConstant methods for crate::dnn::PaddingLayer\nMutable methods for crate::dnn::PermuteLayer\nConstant methods for crate::dnn::PermuteLayer\nMutable methods for crate::dnn::PoolingLayerInt8\nConstant methods for crate::dnn::PoolingLayerInt8\nMutable methods for crate::dnn::PoolingLayer\nConstant methods for crate::dnn::PoolingLayer\nMutable methods for crate::dnn::PowerLayer\nConstant methods for crate::dnn::PowerLayer\nMutable methods for crate::dnn::PriorBoxLayer\nConstant methods for crate::dnn::PriorBoxLayer\nMutable methods for crate::dnn::ProposalLayer\nConstant methods for crate::dnn::ProposalLayer\nMutable methods for crate::dnn::QuantizeLayer\nConstant methods for crate::dnn::QuantizeLayer\nClassical recurrent layer\nMutable methods for crate::dnn::RNNLayer\nConstant methods for crate::dnn::RNNLayer\nMutable methods for crate::dnn::ReLU6Layer\nConstant methods for crate::dnn::ReLU6Layer\nMutable methods for crate::dnn::ReLULayer\nConstant methods for crate::dnn::ReLULayer\nMutable methods for crate::dnn::RegionLayer\nConstant methods for crate::dnn::RegionLayer\nMutable methods for crate::dnn::ReorgLayer\nConstant methods for crate::dnn::ReorgLayer\nMutable methods for crate::dnn::RequantizeLayer\nConstant methods for crate::dnn::RequantizeLayer\nMutable methods for crate::dnn::ReshapeLayer\nConstant methods for crate::dnn::ReshapeLayer\nResize input 4-dimensional blob by nearest neighbor or …\nMutable methods for crate::dnn::ResizeLayer\nConstant methods for crate::dnn::ResizeLayer\nMutable methods for crate::dnn::ScaleLayerInt8\nConstant methods for crate::dnn::ScaleLayerInt8\nMutable methods for crate::dnn::ScaleLayer\nConstant methods for crate::dnn::ScaleLayer\nThis class represents high-level API for segmentation  …\nMutable methods for crate::dnn::SegmentationModel\nConstant methods for crate::dnn::SegmentationModel\nMutable methods for crate::dnn::ShiftLayerInt8\nConstant methods for crate::dnn::ShiftLayerInt8\nMutable methods for crate::dnn::ShiftLayer\nConstant methods for crate::dnn::ShiftLayer\nPermute channels of 4-dimensional input blob.\nMutable methods for crate::dnn::ShuffleChannelLayer\nConstant methods for crate::dnn::ShuffleChannelLayer\nMutable methods for crate::dnn::SigmoidLayer\nConstant methods for crate::dnn::SigmoidLayer\nSlice layer has several modes:\nMutable methods for crate::dnn::SliceLayer\nConstant methods for crate::dnn::SliceLayer\nEnum of Soft NMS methods.\nMutable methods for crate::dnn::SoftmaxLayerInt8\nConstant methods for crate::dnn::SoftmaxLayerInt8\nMutable methods for crate::dnn::SoftmaxLayer\nConstant methods for crate::dnn::SoftmaxLayer\nSome value of type <code>T</code>.\nMutable methods for crate::dnn::SplitLayer\nConstant methods for crate::dnn::SplitLayer\nMutable methods for crate::dnn::SwishLayer\nConstant methods for crate::dnn::SwishLayer\nMutable methods for crate::dnn::TanHLayer\nConstant methods for crate::dnn::TanHLayer\nEnum of target devices for computations.\nBase class for text detection networks\nMutable methods for crate::dnn::TextDetectionModel\nConstant methods for crate::dnn::TextDetectionModel\nThis class represents high-level API for text detection DL …\nMutable methods for crate::dnn::TextDetectionModel_DB\nConstant methods for crate::dnn::TextDetectionModel_DB\nThis class represents high-level API for text detection DL …\nMutable methods for crate::dnn::TextDetectionModel_EAST\nConstant methods for crate::dnn::TextDetectionModel_EAST\nThis class represents high-level API for text recognition …\nMutable methods for crate::dnn::TextRecognitionModel\nConstant methods for crate::dnn::TextRecognitionModel\nMutable methods for crate::dnn::_Range\nConstant methods for crate::dnn::_Range\nCreates 4-dimensional blob from image. Optionally resizes …\nCreates 4-dimensional blob from image. Optionally resizes …\nCreates 4-dimensional blob from image. @details This is an …\nCreates 4-dimensional blob from image. @details This is an …\nCreates 4-dimensional blob from series of images. …\nCreates 4-dimensional blob from series of images. …\nCreates 4-dimensional blob from series of images. @details …\nCreates 4-dimensional blob from series of images. @details …\nEnables detailed logging of the DNN model loading with CV …\nReturns Inference Engine internal backend API.\nReturns Inference Engine CPU type.\nReturns Inference Engine VPU type.\nParse a 4D blob and output the images it contains as 2D …\nPerforms non maximum suppression given boxes and …\nPerforms non maximum suppression given boxes and …\nC++ default parameters\nNote\nC++ default parameters\nNote\nC++ default parameters\nNote\nRead deep learning network represented in one of the …\nRead deep learning network represented in one of the …\nRead deep learning network represented in one of the …\nRead deep learning network represented in one of the …\nReads a network model stored in Caffe framework’s format.\nReads a network model stored in Caffe model in memory.\nReads a network model stored in Caffe model in memory.\nReads a network model stored in Caffe framework’s format.\nReads a network model stored in Caffe model in memory. …\nReads a network model stored in Caffe model in memory. …\nReads a network model stored in Darknet model files.\nReads a network model stored in Darknet model files.\nReads a network model stored in Darknet model files.\nReads a network model stored in Darknet model files.\nReads a network model stored in Darknet model files.\nReads a network model stored in Darknet model files.\nLoad a network from Intel’s Model Optimizer intermediate …\nLoad a network from Intel’s Model Optimizer intermediate …\nLoad a network from Intel’s Model Optimizer intermediate …\nReads a network model ONNX.\nReads a network model from ONNX in-memory buffer.\nReads a network model from ONNX in-memory buffer.\nReads a network model stored in TensorFlow framework’s …\nReads a network model stored in TensorFlow framework’s …\nReads a network model stored in TensorFlow framework’s …\nReads a network model stored in TensorFlow framework’s …\nReads a network model stored in TensorFlow framework’s …\nReads a network model stored in TensorFlow framework’s …\nReads a network model stored in Torch7 framework’s …\nReads a network model stored in Torch7 framework’s …\nCreates blob from .pb file.\nLoads blob which was serialized as torch.Tensor object of …\nLoads blob which was serialized as torch.Tensor object of …\nRelease a HDDL plugin.\nRelease a Myriad device (binded by OpenCV).\nSpecify Inference Engine internal backend API.\nC++ default parameters\nNote\nConvert all weights of Caffe network to half precision …\nConvert all weights of Caffe network to half precision …\nPerforms soft non maximum suppression given boxes and …\nPerforms soft non maximum suppression given boxes and …\nC++ default parameters\nNote\nC++ default parameters\nNote\nCreate a text representation for a binary network stored …\nMutable methods for crate::dnn::AbsLayer\nConstant methods for crate::dnn::AbsLayer\nMutable methods for crate::dnn::AccumLayer\nConstant methods for crate::dnn::AccumLayer\nMutable methods for crate::dnn::ActivationLayerInt8\nConstant methods for crate::dnn::ActivationLayerInt8\nMutable methods for crate::dnn::ActivationLayer\nConstant methods for crate::dnn::ActivationLayer\nMutable methods for crate::dnn::BNLLLayer\nConstant methods for crate::dnn::BNLLLayer\nMutable methods for crate::dnn::BackendNode\nConstant methods for crate::dnn::BackendNode\nMutable methods for crate::dnn::BackendWrapper\nConstant methods for crate::dnn::BackendWrapper\nMutable methods for crate::dnn::BaseConvolutionLayer\nConstant methods for crate::dnn::BaseConvolutionLayer\nMutable methods for crate::dnn::BatchNormLayerInt8\nConstant methods for crate::dnn::BatchNormLayerInt8\nMutable methods for crate::dnn::BatchNormLayer\nConstant methods for crate::dnn::BatchNormLayer\nMutable methods for crate::dnn::BlankLayer\nConstant methods for crate::dnn::BlankLayer\nMutable methods for crate::dnn::ChannelsPReLULayer\nConstant methods for crate::dnn::ChannelsPReLULayer\nMutable methods for crate::dnn::ClassificationModel\nConstant methods for crate::dnn::ClassificationModel\nMutable methods for crate::dnn::ConcatLayer\nConstant methods for crate::dnn::ConcatLayer\nMutable methods for crate::dnn::ConstLayer\nConstant methods for crate::dnn::ConstLayer\nMutable methods for crate::dnn::ConvolutionLayerInt8\nConstant methods for crate::dnn::ConvolutionLayerInt8\nMutable methods for crate::dnn::ConvolutionLayer\nConstant methods for crate::dnn::ConvolutionLayer\nMutable methods for crate::dnn::CorrelationLayer\nConstant methods for crate::dnn::CorrelationLayer\nMutable methods for crate::dnn::CropAndResizeLayer\nConstant methods for crate::dnn::CropAndResizeLayer\nMutable methods for crate::dnn::CropLayer\nConstant methods for crate::dnn::CropLayer\nMutable methods for crate::dnn::CumSumLayer\nConstant methods for crate::dnn::CumSumLayer\nMutable methods for crate::dnn::DataAugmentationLayer\nConstant methods for crate::dnn::DataAugmentationLayer\nMutable methods for crate::dnn::DeconvolutionLayer\nConstant methods for crate::dnn::DeconvolutionLayer\nMutable methods for crate::dnn::DequantizeLayer\nConstant methods for crate::dnn::DequantizeLayer\nMutable methods for crate::dnn::DetectionModel\nConstant methods for crate::dnn::DetectionModel\nMutable methods for crate::dnn::DetectionOutputLayer\nConstant methods for crate::dnn::DetectionOutputLayer\nMutable methods for crate::dnn::Dict\nConstant methods for crate::dnn::Dict\nMutable methods for crate::dnn::DictValue\nConstant methods for crate::dnn::DictValue\nMutable methods for crate::dnn::ELULayer\nConstant methods for crate::dnn::ELULayer\nMutable methods for crate::dnn::EltwiseLayerInt8\nConstant methods for crate::dnn::EltwiseLayerInt8\nMutable methods for crate::dnn::EltwiseLayer\nConstant methods for crate::dnn::EltwiseLayer\nMutable methods for crate::dnn::ExpLayer\nConstant methods for crate::dnn::ExpLayer\nMutable methods for crate::dnn::FlattenLayer\nConstant methods for crate::dnn::FlattenLayer\nMutable methods for crate::dnn::FlowWarpLayer\nConstant methods for crate::dnn::FlowWarpLayer\nMutable methods for crate::dnn::GRULayer\nConstant methods for crate::dnn::GRULayer\nMutable methods for crate::dnn::InnerProductLayerInt8\nConstant methods for crate::dnn::InnerProductLayerInt8\nMutable methods for crate::dnn::InnerProductLayer\nConstant methods for crate::dnn::InnerProductLayer\nMutable methods for crate::dnn::InterpLayer\nConstant methods for crate::dnn::InterpLayer\nMutable methods for crate::dnn::KeypointsModel\nConstant methods for crate::dnn::KeypointsModel\nMutable methods for crate::dnn::LRNLayer\nConstant methods for crate::dnn::LRNLayer\nMutable methods for crate::dnn::LSTMLayer\nConstant methods for crate::dnn::LSTMLayer\nMutable methods for crate::dnn::LayerFactory\nConstant methods for crate::dnn::LayerFactory\nMutable methods for crate::dnn::LayerParams\nConstant methods for crate::dnn::LayerParams\nMutable methods for crate::dnn::Layer\nConstant methods for crate::dnn::Layer\nMutable methods for crate::dnn::MVNLayer\nConstant methods for crate::dnn::MVNLayer\nMutable methods for crate::dnn::MaxUnpoolLayer\nConstant methods for crate::dnn::MaxUnpoolLayer\nMutable methods for crate::dnn::MishLayer\nConstant methods for crate::dnn::MishLayer\nMutable methods for crate::dnn::Model\nConstant methods for crate::dnn::Model\nMutable methods for crate::dnn::Net\nConstant methods for crate::dnn::Net\nMutable methods for crate::dnn::NormalizeBBoxLayer\nConstant methods for crate::dnn::NormalizeBBoxLayer\nMutable methods for crate::dnn::PaddingLayer\nConstant methods for crate::dnn::PaddingLayer\nMutable methods for crate::dnn::PermuteLayer\nConstant methods for crate::dnn::PermuteLayer\nMutable methods for crate::dnn::PoolingLayerInt8\nConstant methods for crate::dnn::PoolingLayerInt8\nMutable methods for crate::dnn::PoolingLayer\nConstant methods for crate::dnn::PoolingLayer\nMutable methods for crate::dnn::PowerLayer\nConstant methods for crate::dnn::PowerLayer\nMutable methods for crate::dnn::PriorBoxLayer\nConstant methods for crate::dnn::PriorBoxLayer\nMutable methods for crate::dnn::ProposalLayer\nConstant methods for crate::dnn::ProposalLayer\nMutable methods for crate::dnn::QuantizeLayer\nConstant methods for crate::dnn::QuantizeLayer\nMutable methods for crate::dnn::RNNLayer\nConstant methods for crate::dnn::RNNLayer\nMutable methods for crate::dnn::ReLU6Layer\nConstant methods for crate::dnn::ReLU6Layer\nMutable methods for crate::dnn::ReLULayer\nConstant methods for crate::dnn::ReLULayer\nMutable methods for crate::dnn::RegionLayer\nConstant methods for crate::dnn::RegionLayer\nMutable methods for crate::dnn::ReorgLayer\nConstant methods for crate::dnn::ReorgLayer\nMutable methods for crate::dnn::RequantizeLayer\nConstant methods for crate::dnn::RequantizeLayer\nMutable methods for crate::dnn::ReshapeLayer\nConstant methods for crate::dnn::ReshapeLayer\nMutable methods for crate::dnn::ResizeLayer\nConstant methods for crate::dnn::ResizeLayer\nMutable methods for crate::dnn::ScaleLayerInt8\nConstant methods for crate::dnn::ScaleLayerInt8\nMutable methods for crate::dnn::ScaleLayer\nConstant methods for crate::dnn::ScaleLayer\nMutable methods for crate::dnn::SegmentationModel\nConstant methods for crate::dnn::SegmentationModel\nMutable methods for crate::dnn::ShiftLayerInt8\nConstant methods for crate::dnn::ShiftLayerInt8\nMutable methods for crate::dnn::ShiftLayer\nConstant methods for crate::dnn::ShiftLayer\nMutable methods for crate::dnn::ShuffleChannelLayer\nConstant methods for crate::dnn::ShuffleChannelLayer\nMutable methods for crate::dnn::SigmoidLayer\nConstant methods for crate::dnn::SigmoidLayer\nMutable methods for crate::dnn::SliceLayer\nConstant methods for crate::dnn::SliceLayer\nMutable methods for crate::dnn::SoftmaxLayerInt8\nConstant methods for crate::dnn::SoftmaxLayerInt8\nMutable methods for crate::dnn::SoftmaxLayer\nConstant methods for crate::dnn::SoftmaxLayer\nMutable methods for crate::dnn::SplitLayer\nConstant methods for crate::dnn::SplitLayer\nMutable methods for crate::dnn::SwishLayer\nConstant methods for crate::dnn::SwishLayer\nMutable methods for crate::dnn::TanHLayer\nConstant methods for crate::dnn::TanHLayer\nMutable methods for crate::dnn::TextDetectionModel\nConstant methods for crate::dnn::TextDetectionModel\nMutable methods for crate::dnn::TextDetectionModel_DB\nConstant methods for crate::dnn::TextDetectionModel_DB\nMutable methods for crate::dnn::TextDetectionModel_EAST\nConstant methods for crate::dnn::TextDetectionModel_EAST\nMutable methods for crate::dnn::TextRecognitionModel\nConstant methods for crate::dnn::TextRecognitionModel\nMutable methods for crate::dnn::_Range\nConstant methods for crate::dnn::_Range\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMutable methods for crate::dnn::AbsLayer\nConstant methods for crate::dnn::AbsLayer\nMutable methods for crate::dnn::AccumLayer\nConstant methods for crate::dnn::AccumLayer\nMutable methods for crate::dnn::ActivationLayerInt8\nConstant methods for crate::dnn::ActivationLayerInt8\nMutable methods for crate::dnn::ActivationLayer\nConstant methods for crate::dnn::ActivationLayer\nMutable methods for core::Algorithm\nConstant methods for core::Algorithm\nMutable methods for core::Arrays\nConstant methods for core::Arrays\nMutable methods for core::AsyncArray\nConstant methods for core::AsyncArray\nMutable methods for core::AsyncPromise\nConstant methods for core::AsyncPromise\nMutable methods for crate::dnn::BNLLLayer\nConstant methods for crate::dnn::BNLLLayer\nMutable methods for crate::dnn::BackendNode\nConstant methods for crate::dnn::BackendNode\nMutable methods for crate::dnn::BackendWrapper\nConstant methods for crate::dnn::BackendWrapper\nMutable methods for crate::dnn::BaseConvolutionLayer\nConstant methods for crate::dnn::BaseConvolutionLayer\nMutable methods for crate::dnn::BatchNormLayerInt8\nConstant methods for crate::dnn::BatchNormLayerInt8\nMutable methods for crate::dnn::BatchNormLayer\nConstant methods for crate::dnn::BatchNormLayer\nMutable methods for crate::dnn::BlankLayer\nConstant methods for crate::dnn::BlankLayer\nMutable methods for core::BufferPool\nConstant methods for core::BufferPool\nMutable methods for core::Buffer\nConstant methods for core::Buffer\nMutable methods for crate::imgproc::CLAHE\nConstant methods for crate::imgproc::CLAHE\nMutable methods for crate::dnn::ChannelsPReLULayer\nConstant methods for crate::dnn::ChannelsPReLULayer\nMutable methods for crate::dnn::ClassificationModel\nConstant methods for crate::dnn::ClassificationModel\nMutable methods for core::CommandLineParser\nConstant methods for core::CommandLineParser\nMutable methods for crate::dnn::ConcatLayer\nConstant methods for crate::dnn::ConcatLayer\nMutable methods for core::ConjGradSolver\nConstant methods for core::ConjGradSolver\nMutable methods for crate::dnn::ConstLayer\nConstant methods for crate::dnn::ConstLayer\nMutable methods for core::Context\nConstant methods for core::Context\nMutable methods for core::Context_UserContext\nConstant methods for core::Context_UserContext\nMutable methods for crate::dnn::ConvolutionLayerInt8\nConstant methods for crate::dnn::ConvolutionLayerInt8\nMutable methods for crate::dnn::ConvolutionLayer\nConstant methods for crate::dnn::ConvolutionLayer\nMutable methods for crate::dnn::CorrelationLayer\nConstant methods for crate::dnn::CorrelationLayer\nMutable methods for crate::dnn::CropAndResizeLayer\nConstant methods for crate::dnn::CropAndResizeLayer\nMutable methods for crate::dnn::CropLayer\nConstant methods for crate::dnn::CropLayer\nMutable methods for crate::dnn::CumSumLayer\nConstant methods for crate::dnn::CumSumLayer\nMutable methods for crate::dnn::DataAugmentationLayer\nConstant methods for crate::dnn::DataAugmentationLayer\nMutable methods for crate::dnn::DeconvolutionLayer\nConstant methods for crate::dnn::DeconvolutionLayer\nMutable methods for crate::dnn::DequantizeLayer\nConstant methods for crate::dnn::DequantizeLayer\nMutable methods for core::Detail_CheckContext\nConstant methods for core::Detail_CheckContext\nMutable methods for crate::dnn::DetectionModel\nConstant methods for crate::dnn::DetectionModel\nMutable methods for crate::dnn::DetectionOutputLayer\nConstant methods for crate::dnn::DetectionOutputLayer\nMutable methods for core::DeviceInfo\nConstant methods for core::DeviceInfo\nMutable methods for core::Device\nConstant methods for core::Device\nMutable methods for crate::dnn::Dict\nConstant methods for crate::dnn::Dict\nMutable methods for crate::dnn::DictValue\nConstant methods for crate::dnn::DictValue\nMutable methods for core::DownhillSolver\nConstant methods for core::DownhillSolver\nMutable methods for crate::dnn::ELULayer\nConstant methods for crate::dnn::ELULayer\nMutable methods for crate::dnn::EltwiseLayerInt8\nConstant methods for crate::dnn::EltwiseLayerInt8\nMutable methods for crate::dnn::EltwiseLayer\nConstant methods for crate::dnn::EltwiseLayer\nMutable methods for core::Event\nConstant methods for core::Event\nMutable methods for core::Exception\nConstant methods for core::Exception\nMutable methods for crate::dnn::ExpLayer\nConstant methods for crate::dnn::ExpLayer\nMutable methods for core::FileNodeIterator\nConstant methods for core::FileNodeIterator\nMutable methods for core::FileNode\nConstant methods for core::FileNode\nMutable methods for core::FileStorage\nConstant methods for core::FileStorage\nMutable methods for crate::dnn::FlattenLayer\nConstant methods for crate::dnn::FlattenLayer\nMutable methods for crate::dnn::FlowWarpLayer\nConstant methods for crate::dnn::FlowWarpLayer\nMutable methods for core::Formatted\nConstant methods for core::Formatted\nMutable methods for core::Formatter\nConstant methods for core::Formatter\nMutable methods for crate::dnn::GRULayer\nConstant methods for crate::dnn::GRULayer\nMutable methods for crate::imgproc::GeneralizedHoughBallard\nConstant methods for …\nMutable methods for crate::imgproc::GeneralizedHoughGuil\nConstant methods for crate::imgproc::GeneralizedHoughGuil\nMutable methods for crate::imgproc::GeneralizedHough\nConstant methods for crate::imgproc::GeneralizedHough\nMutable methods for core::GpuData\nConstant methods for core::GpuData\nMutable methods for core::GpuMatND\nConstant methods for core::GpuMatND\nMutable methods for core::GpuMat\nConstant methods for core::GpuMat\nMutable methods for core::GpuMat_Allocator\nConstant methods for core::GpuMat_Allocator\nMutable methods for core::Hamming\nConstant methods for core::Hamming\nMutable methods for core::HostMem\nConstant methods for core::HostMem\nMutable methods for core::Image2D\nConstant methods for core::Image2D\nMutable methods for crate::dnn::InnerProductLayerInt8\nConstant methods for crate::dnn::InnerProductLayerInt8\nMutable methods for crate::dnn::InnerProductLayer\nConstant methods for crate::dnn::InnerProductLayer\nMutable methods for crate::imgproc::IntelligentScissorsMB\nConstant methods for crate::imgproc::IntelligentScissorsMB\nMutable methods for crate::dnn::InterpLayer\nConstant methods for crate::dnn::InterpLayer\nMutable methods for core::KernelArg\nConstant methods for core::KernelArg\nMutable methods for core::Kernel\nConstant methods for core::Kernel\nMutable methods for core::KeyPoint\nConstant methods for core::KeyPoint\nMutable methods for crate::dnn::KeypointsModel\nConstant methods for crate::dnn::KeypointsModel\nMutable methods for core::LDA\nConstant methods for core::LDA\nMutable methods for crate::dnn::LRNLayer\nConstant methods for crate::dnn::LRNLayer\nMutable methods for crate::dnn::LSTMLayer\nConstant methods for crate::dnn::LSTMLayer\nMutable methods for crate::dnn::LayerFactory\nConstant methods for crate::dnn::LayerFactory\nMutable methods for crate::dnn::LayerParams\nConstant methods for crate::dnn::LayerParams\nMutable methods for crate::dnn::Layer\nConstant methods for crate::dnn::Layer\nMutable methods for crate::imgproc::LineIterator\nConstant methods for crate::imgproc::LineIterator\nMutable methods for crate::imgproc::LineSegmentDetector\nConstant methods for crate::imgproc::LineSegmentDetector\nMutable methods for core::LogTag\nConstant methods for core::LogTag\nMutable methods for crate::dnn::MVNLayer\nConstant methods for crate::dnn::MVNLayer\nMutable methods for core::MatConstIterator\nConstant methods for core::MatConstIterator\nMutable methods for core::MatExpr\nConstant methods for core::MatExpr\nMutable methods for core::MatOp\nConstant methods for core::MatOp\nMutable methods for core::MatSize\nConstant methods for core::MatSize\nMutable methods for core::MatStep\nConstant methods for core::MatStep\nMutable methods for core::Mat\nConstant methods for core::Mat\nMutable methods for core::Matx_AddOp\nConstant methods for core::Matx_AddOp\nMutable methods for core::Matx_DivOp\nConstant methods for core::Matx_DivOp\nMutable methods for core::Matx_MatMulOp\nConstant methods for core::Matx_MatMulOp\nMutable methods for core::Matx_MulOp\nConstant methods for core::Matx_MulOp\nMutable methods for core::Matx_ScaleOp\nConstant methods for core::Matx_ScaleOp\nMutable methods for core::Matx_SubOp\nConstant methods for core::Matx_SubOp\nMutable methods for core::Matx_TOp\nConstant methods for core::Matx_TOp\nMutable methods for crate::dnn::MaxUnpoolLayer\nConstant methods for crate::dnn::MaxUnpoolLayer\nMutable methods for core::MinProblemSolver\nConstant methods for core::MinProblemSolver\nMutable methods for core::MinProblemSolver_Function\nConstant methods for core::MinProblemSolver_Function\nMutable methods for crate::dnn::MishLayer\nConstant methods for crate::dnn::MishLayer\nMutable methods for crate::dnn::Model\nConstant methods for crate::dnn::Model\nMutable methods for crate::dnn::Net\nConstant methods for crate::dnn::Net\nMutable methods for core::NodeData\nConstant methods for core::NodeData\nMutable methods for crate::dnn::NormalizeBBoxLayer\nConstant methods for crate::dnn::NormalizeBBoxLayer\nMutable methods for core::OpenCLExecutionContext\nConstant methods for core::OpenCLExecutionContext\nMutable methods for core::PCA\nConstant methods for core::PCA\nMutable methods for crate::dnn::PaddingLayer\nConstant methods for crate::dnn::PaddingLayer\nMutable methods for core::ParallelLoopBody\nConstant methods for core::ParallelLoopBody\nMutable methods for crate::dnn::PermuteLayer\nConstant methods for crate::dnn::PermuteLayer\nMutable methods for core::PlatformInfo\nConstant methods for core::PlatformInfo\nMutable methods for core::Platform\nConstant methods for core::Platform\nMutable methods for crate::dnn::PoolingLayerInt8\nConstant methods for crate::dnn::PoolingLayerInt8\nMutable methods for crate::dnn::PoolingLayer\nConstant methods for crate::dnn::PoolingLayer\nMutable methods for crate::dnn::PowerLayer\nConstant methods for crate::dnn::PowerLayer\nMutable methods for crate::dnn::PriorBoxLayer\nConstant methods for crate::dnn::PriorBoxLayer\nMutable methods for core::ProgramSource\nConstant methods for core::ProgramSource\nMutable methods for core::Program\nConstant methods for core::Program\nMutable methods for crate::dnn::ProposalLayer\nConstant methods for crate::dnn::ProposalLayer\nMutable methods for crate::dnn::QuantizeLayer\nConstant methods for crate::dnn::QuantizeLayer\nMutable methods for core::Queue\nConstant methods for core::Queue\nMutable methods for core::RNG\nConstant methods for core::RNG\nMutable methods for core::RNG_MT19937\nConstant methods for core::RNG_MT19937\nMutable methods for crate::dnn::RNNLayer\nConstant methods for crate::dnn::RNNLayer\nMutable methods for core::Range\nConstant methods for core::Range\nMutable methods for crate::dnn::ReLU6Layer\nConstant methods for crate::dnn::ReLU6Layer\nMutable methods for crate::dnn::ReLULayer\nConstant methods for crate::dnn::ReLULayer\nMutable methods for crate::dnn::RegionLayer\nConstant methods for crate::dnn::RegionLayer\nMutable methods for crate::dnn::ReorgLayer\nConstant methods for crate::dnn::ReorgLayer\nMutable methods for crate::dnn::RequantizeLayer\nConstant methods for crate::dnn::RequantizeLayer\nMutable methods for crate::dnn::ReshapeLayer\nConstant methods for crate::dnn::ReshapeLayer\nMutable methods for crate::dnn::ResizeLayer\nConstant methods for crate::dnn::ResizeLayer\nMutable methods for core::SVD\nConstant methods for core::SVD\nMutable methods for crate::dnn::ScaleLayerInt8\nConstant methods for crate::dnn::ScaleLayerInt8\nMutable methods for crate::dnn::ScaleLayer\nConstant methods for crate::dnn::ScaleLayer\nMutable methods for crate::dnn::SegmentationModel\nConstant methods for crate::dnn::SegmentationModel\nMutable methods for crate::dnn::ShiftLayerInt8\nConstant methods for crate::dnn::ShiftLayerInt8\nMutable methods for crate::dnn::ShiftLayer\nConstant methods for crate::dnn::ShiftLayer\nMutable methods for crate::dnn::ShuffleChannelLayer\nConstant methods for crate::dnn::ShuffleChannelLayer\nMutable methods for crate::dnn::SigmoidLayer\nConstant methods for crate::dnn::SigmoidLayer\nMutable methods for crate::dnn::SliceLayer\nConstant methods for crate::dnn::SliceLayer\nMutable methods for crate::dnn::SoftmaxLayerInt8\nConstant methods for crate::dnn::SoftmaxLayerInt8\nMutable methods for crate::dnn::SoftmaxLayer\nConstant methods for crate::dnn::SoftmaxLayer\nMutable methods for core::SparseMatConstIterator\nConstant methods for core::SparseMatConstIterator\nMutable methods for core::SparseMatIterator\nConstant methods for core::SparseMatIterator\nMutable methods for core::SparseMat\nConstant methods for core::SparseMat\nMutable methods for core::SparseMat_Hdr\nConstant methods for core::SparseMat_Hdr\nMutable methods for core::SparseMat_Node\nConstant methods for core::SparseMat_Node\nMutable methods for crate::dnn::SplitLayer\nConstant methods for crate::dnn::SplitLayer\nMutable methods for core::Stream\nConstant methods for core::Stream\nMutable methods for crate::imgproc::Subdiv2D\nConstant methods for crate::imgproc::Subdiv2D\nMutable methods for crate::dnn::SwishLayer\nConstant methods for crate::dnn::SwishLayer\nMutable methods for crate::dnn::TanHLayer\nConstant methods for crate::dnn::TanHLayer\nMutable methods for core::TargetArchs\nConstant methods for core::TargetArchs\nMutable methods for crate::dnn::TextDetectionModel\nConstant methods for crate::dnn::TextDetectionModel\nMutable methods for crate::dnn::TextDetectionModel_DB\nConstant methods for crate::dnn::TextDetectionModel_DB\nMutable methods for crate::dnn::TextDetectionModel_EAST\nConstant methods for crate::dnn::TextDetectionModel_EAST\nMutable methods for crate::dnn::TextRecognitionModel\nConstant methods for crate::dnn::TextRecognitionModel\nMutable methods for core::Texture2D\nConstant methods for core::Texture2D\nMutable methods for core::TickMeter\nConstant methods for core::TickMeter\nMutable methods for core::Timer\nConstant methods for core::Timer\nMutable methods for core::UMatData\nConstant methods for core::UMatData\nMutable methods for core::UMat\nConstant methods for core::UMat\nMutable methods for crate::videoio::VideoCapture\nConstant methods for crate::videoio::VideoCapture\nMutable methods for crate::videoio::VideoWriter\nConstant methods for crate::videoio::VideoWriter\nMutable methods for core::WriteStructContext\nConstant methods for core::WriteStructContext\nMutable methods for core::_InputArray\nConstant methods for core::_InputArray\nMutable methods for core::_InputOutputArray\nConstant methods for core::_InputOutputArray\nMutable methods for core::_OutputArray\nConstant methods for core::_OutputArray\nMutable methods for crate::dnn::_Range\nConstant methods for crate::dnn::_Range\nIf set, the image is read in any possible color format.\nIf set, the image is read in any possible color format.\nIf set, return 16-bit/32-bit image when the input has the …\nIf set, return 16-bit/32-bit image when the input has the …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the single channel …\nIf set, always convert image to the single channel …\nIf set, do not rotate the image according to EXIF’s …\nIf set, do not rotate the image according to EXIF’s …\nIf set, use the gdal driver for loading the image.\nIf set, use the gdal driver for loading the image.\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the 3 channel BGR color …\nIf set, always convert image to the single channel …\nIf set, always convert image to the single channel …\nIf set, always convert image to the single channel …\nIf set, always convert image to the single channel …\nIf set, always convert image to the single channel …\nIf set, always convert image to the single channel …\nIf set, return the loaded image as is (with alpha channel, …\nIf set, return the loaded image as is (with alpha channel, …\noverride EXR compression type (ZIP_COMPRESSION = 3 is …\noverride EXR compression type (ZIP_COMPRESSION = 3 is …\nlossy 4-by-4 pixel block compression, fixed compression …\nlossy 4-by-4 pixel block compression, fixed compression …\nlossy 4-by-4 pixel block compression, flat fields are …\nlossy 4-by-4 pixel block compression, flat fields are …\nlossy DCT based compression, in blocks of 32 scanlines. …\nlossy DCT based compression, in blocks of 32 scanlines. …\nlossy DCT based compression, in blocks of 256 scanlines. …\nlossy DCT based compression, in blocks of 256 scanlines. …\nno compression\nno compression\npiz-based wavelet compression\npiz-based wavelet compression\nlossy 24-bit float compression\nlossy 24-bit float compression\nrun length encoding\nrun length encoding\nzlib compression, in blocks of 16 scan lines\nzlib compression, in blocks of 16 scan lines\nzlib compression, one scan line at a time\nzlib compression, one scan line at a time\noverride EXR storage type (FLOAT (FP32) is default)\noverride EXR storage type (FLOAT (FP32) is default)\nstore as FP32 (default)\nstore as FP32 (default)\nstore as HALF (FP16)\nstore as HALF (FP16)\nFor JPEG2000, use to specify the target compression rate …\nFor JPEG2000, use to specify the target compression rate …\nSeparate chroma quality level, 0 - 100, default is 0 - don…\nSeparate chroma quality level, 0 - 100, default is 0 - don…\nSeparate luma quality level, 0 - 100, default is 0 - don’…\nSeparate luma quality level, 0 - 100, default is 0 - don’…\nEnable JPEG features, 0 or 1, default is False.\nEnable JPEG features, 0 or 1, default is False.\nEnable JPEG features, 0 or 1, default is False.\nEnable JPEG features, 0 or 1, default is False.\nFor JPEG, it can be a quality from 0 to 100 (the higher is …\nFor JPEG, it can be a quality from 0 to 100 (the higher is …\nJPEG restart interval, 0 - 65535, default is 0 - no …\nJPEG restart interval, 0 - 65535, default is 0 - no …\nFor PAM, sets the TUPLETYPE field to the corresponding …\nFor PAM, sets the TUPLETYPE field to the corresponding …\nBinary level PNG, 0 or 1, default is 0.\nBinary level PNG, 0 or 1, default is 0.\nFor PNG, it can be the compression level from 0 to 9. A …\nFor PNG, it can be the compression level from 0 to 9. A …\nOne of cv::ImwritePNGFlags, default is …\nOne of cv::ImwritePNGFlags, default is …\nUse this value for normal data.\nUse this value for normal data.\nUse this value for data produced by a filter (or …\nUse this value for data produced by a filter (or …\nUsing this value prevents the use of dynamic Huffman …\nUsing this value prevents the use of dynamic Huffman …\nUse this value to force Huffman encoding only (no string …\nUse this value to force Huffman encoding only (no string …\nUse this value to limit match distances to one (run-length …\nUse this value to limit match distances to one (run-length …\nFor PPM, PGM, or PBM, it can be a binary format flag, 0 or …\nFor PPM, PGM, or PBM, it can be a binary format flag, 0 or …\nFor TIFF, use to specify the image compression scheme. See …\nFor TIFF, use to specify the image compression scheme. See …\nFor TIFF, use to specify which DPI resolution unit to set; …\nFor TIFF, use to specify which DPI resolution unit to set; …\nFor TIFF, use to specify the X direction DPI\nFor TIFF, use to specify the X direction DPI\nFor TIFF, use to specify the Y direction DPI\nFor TIFF, use to specify the Y direction DPI\nFor WEBP, it can be a quality from 1 to 100 (the higher is …\nFor WEBP, it can be a quality from 1 to 100 (the higher is …\nImread flags\nImwrite flags\nImwrite PAM specific tupletype flags used to define the ‘…\nImwrite PNG specific flags used to tune the compression …\nReturns true if the specified image can be decoded by …\nReturns true if an image with the specified filename can …\nReturns the number of images inside the give file\nReturns the number of images inside the give file\nReads an image from a buffer in memory.\nReads an image from a buffer in memory.\nEncodes an image into a memory buffer.\nEncodes an image into a memory buffer.\nLoads an image from a file.\nLoads an image from a file.\nLoads a multi-page image from a file.\nLoads a multi-page image from a file.\nLoads a of images of a multi-page image from a file.\nLoads a of images of a multi-page image from a file.\nSaves an image to a specified file.\nSaves an image to a specified file.\nThis is an overloaded member function, provided for …\n@overload multi-image overload for bindings\nthe threshold value inline formula is a weighted sum …\nthe threshold value inline formula is a weighted sum …\nthe threshold value inline formula is a mean of the inline …\nthe threshold value inline formula is a mean of the inline …\nadaptive threshold algorithm\nSame as CCL_GRANA. It is preferable to use the flag with …\nSame as CCL_GRANA. It is preferable to use the flag with …\nSpaghetti Bolelli2019 algorithm for 8-way connectivity, …\nSpaghetti Bolelli2019 algorithm for 8-way connectivity, …\nBBDT Grana2010 algorithm for 8-way connectivity, SAUF …\nBBDT Grana2010 algorithm for 8-way connectivity, SAUF …\nBBDT Grana2010 algorithm for 8-way connectivity, SAUF …\nBBDT Grana2010 algorithm for 8-way connectivity, SAUF …\nSame as CCL_WU. It is preferable to use the flag with the …\nSame as CCL_WU. It is preferable to use the flag with the …\nSame as CCL_BOLELLI. It is preferable to use the flag with …\nSame as CCL_BOLELLI. It is preferable to use the flag with …\nSAUF Wu2009 algorithm for 8-way connectivity, SAUF …\nSAUF Wu2009 algorithm for 8-way connectivity, SAUF …\nThe total area (in pixels) of the connected component\nThe total area (in pixels) of the connected component\nThe vertical size of the bounding box\nThe vertical size of the bounding box\nThe leftmost (x) coordinate which is the inclusive start …\nThe leftmost (x) coordinate which is the inclusive start …\nMax enumeration value. Used internally only for memory …\nMax enumeration value. Used internally only for memory …\nThe topmost (y) coordinate which is the inclusive start of …\nThe topmost (y) coordinate which is the inclusive start of …\nThe horizontal size of the bounding box\nThe horizontal size of the bounding box\nstores absolutely all the contour points. That is, any 2 …\nstores absolutely all the contour points. That is, any 2 …\ncompresses horizontal, vertical, and diagonal segments and …\ncompresses horizontal, vertical, and diagonal segments and …\napplies one of the flavors of the Teh-Chin chain …\napplies one of the flavors of the Teh-Chin chain …\napplies one of the flavors of the Teh-Chin chain …\napplies one of the flavors of the Teh-Chin chain …\nBase class for Contrast Limited Adaptive Histogram …\nMutable methods for crate::imgproc::CLAHE\nConstant methods for crate::imgproc::CLAHE\nautumn\nautumn\nbone\nbone\ncividis\ncividis\ncool\ncool\ndeepgreen\ndeepgreen\nhot\nhot\nHSV\nHSV\ninferno\ninferno\njet\njet\nmagma\nmagma\nocean\nocean\nparula\nparula\npink\npink\nplasma\nplasma\nrainbow\nrainbow\nspring\nspring\nsummer\nsummer\nturbo\nturbo\ntwilight\ntwilight\ntwilight shifted\ntwilight shifted\nviridis\nviridis\nwinter\nwinter\nconvert between RGB/BGR and BGR555 (16-bit images)\nconvert between RGB/BGR and BGR555 (16-bit images)\nconvert between RGB/BGR and BGR565 (16-bit images)\nconvert between RGB/BGR and BGR565 (16-bit images)\nadd alpha channel to RGB or BGR image\nadd alpha channel to RGB or BGR image\nconvert between RGB/BGR and grayscale, […\nconvert between RGB/BGR and grayscale, […\nconvert RGB/BGR to HLS (hue lightness saturation) with H …\nconvert RGB/BGR to HLS (hue lightness saturation) with H …\nconvert RGB/BGR to HLS (hue lightness saturation) with H …\nconvert RGB/BGR to HLS (hue lightness saturation) with H …\nconvert RGB/BGR to HSV (hue saturation value) with H range …\nconvert RGB/BGR to HSV (hue saturation value) with H range …\nconvert RGB/BGR to HSV (hue saturation value) with H range …\nconvert RGB/BGR to HSV (hue saturation value) with H range …\nconvert RGB/BGR to CIE Lab, [color_convert_rgb_lab] “…\nconvert RGB/BGR to CIE Lab, [color_convert_rgb_lab] “…\nconvert RGB/BGR to CIE Luv, [color_convert_rgb_luv] “…\nconvert RGB/BGR to CIE Luv, [color_convert_rgb_luv] “…\nconvert between RGB and BGR color spaces (with or without …\nconvert between RGB and BGR color spaces (with or without …\nconvert RGB/BGR to CIE XYZ, [color_convert_rgb_xyz] “…\nconvert RGB/BGR to CIE XYZ, [color_convert_rgb_xyz] “…\nconvert RGB/BGR to luma-chroma (aka YCC), […\nconvert RGB/BGR to luma-chroma (aka YCC), […\nconvert between RGB/BGR and YUV\nconvert between RGB/BGR and YUV\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nremove alpha channel from RGB or BGR image\nremove alpha channel from RGB or BGR image\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing using Variable Number of Gradients\nDemosaicing\nDemosaicing\nDemosaicing\nDemosaicing with alpha channel\nEdge-Aware Demosaicing\nDemosaicing using Variable Number of Gradients\nDemosaicing with alpha channel\nDemosaicing with alpha channel\nconvert between grayscale and BGR555 (16-bit images)\nconvert between grayscale and BGR555 (16-bit images)\nconvert between grayscale to BGR565 (16-bit images)\nconvert between grayscale to BGR565 (16-bit images)\nbackward conversions HLS to RGB/BGR with H range 0..180 if …\nbackward conversions HLS to RGB/BGR with H range 0..180 if …\nbackward conversions HLS to RGB/BGR with H range 0..255 if …\nbackward conversions HLS to RGB/BGR with H range 0..255 if …\nbackward conversions HSV to RGB/BGR with H range 0..180 if …\nbackward conversions HSV to RGB/BGR with H range 0..180 if …\nbackward conversions HSV to RGB/BGR with H range 0..255 if …\nbackward conversions HSV to RGB/BGR with H range 0..255 if …\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nRGB to YUV 4:2:0 family\nalpha premultiplication\nalpha premultiplication\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:2 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nYUV 4:2:0 family to RGB\nalpha premultiplication\nalpha premultiplication\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nblock formula\nthe color conversion codes\nGNU Octave/MATLAB equivalent colormaps\nconnected components algorithm\nconnected components statistics\nthe contour approximation algorithm\ndistance = max(|x1-x2|,|y1-y2|)\ndistance = max(|x1-x2|,|y1-y2|)\ndistance = c^2(|x|/c-log(1+|x|/c)), c = 1.3998\ndistance = c^2(|x|/c-log(1+|x|/c)), c = 1.3998\ndistance = |x|&lt;c ? x^2/2 : c(|x|-c/2), c=1.345\ndistance = |x|&lt;c ? x^2/2 : c(|x|-c/2), c=1.345\ndistance = |x1-x2| + |y1-y2|\ndistance = |x1-x2| + |y1-y2|\nL1-L2 metric: distance = 2(sqrt(1+x*x/2) - 1))\nL1-L2 metric: distance = 2(sqrt(1+x*x/2) - 1))\nthe simple euclidean distance\nthe simple euclidean distance\neach connected component of zeros in src (as well as all …\neach connected component of zeros in src (as well as all …\neach zero pixel (and all the non-zero pixels closest to …\neach zero pixel (and all the non-zero pixels closest to …\nmask=3\nmask=3\nmask=5\nmask=5\nUser defined distance\nUser defined distance\ndistance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846\ndistance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846\ndistanceTransform algorithm flags\nMask size for distance transform\nDistance types for Distance Transform and M-estimators\nIf set, the difference between the current pixel and seed …\nIf set, the difference between the current pixel and seed …\nIf set, the function does not change the image ( newVal is …\nIf set, the function does not change the image ( newVal is …\nnormal size serif font\nnormal size serif font\nsmaller version of FONT_HERSHEY_COMPLEX\nsmaller version of FONT_HERSHEY_COMPLEX\nnormal size sans-serif font (more complex than …\nnormal size sans-serif font (more complex than …\nsmall size sans-serif font\nsmall size sans-serif font\nmore complex variant of FONT_HERSHEY_SCRIPT_SIMPLEX\nmore complex variant of FONT_HERSHEY_SCRIPT_SIMPLEX\nhand-writing style font\nhand-writing style font\nnormal size sans-serif font\nnormal size sans-serif font\nnormal size serif font (more complex than …\nnormal size serif font (more complex than …\nflag for italic font\nflag for italic font\nfloodfill algorithm flags\nan obvious background pixels\nan obvious background pixels\nThe value means that the algorithm should just resume.\nThe value means that the algorithm should just resume.\nThe value means that the algorithm should just run the …\nThe value means that the algorithm should just run the …\nan obvious foreground (object) pixel\nan obvious foreground (object) pixel\nThe function initializes the state using the provided …\nThe function initializes the state using the provided …\nThe function initializes the state and the mask using the …\nThe function initializes the state and the mask using the …\na possible background pixel\na possible background pixel\na possible foreground pixel\na possible foreground pixel\nfinds arbitrary template in the grayscale image using …\nfinds arbitrary template in the grayscale image using …\nMutable methods for crate::imgproc::GeneralizedHoughBallard\nConstant methods for …\nfinds arbitrary template in the grayscale image using …\nMutable methods for crate::imgproc::GeneralizedHoughGuil\nConstant methods for crate::imgproc::GeneralizedHoughGuil\nMutable methods for crate::imgproc::GeneralizedHough\nConstant methods for crate::imgproc::GeneralizedHough\nclass of the pixel in GrabCut algorithm\nGrabCut algorithm flags\nBhattacharyya distance (In fact, OpenCV computes Hellinger …\nBhattacharyya distance (In fact, OpenCV computes Hellinger …\nChi-Square block formula\nChi-Square block formula\nAlternative Chi-Square block formula This alternative …\nAlternative Chi-Square block formula This alternative …\nCorrelation block formula where block formula and inline …\nCorrelation block formula where block formula and inline …\nSynonym for HISTCMP_BHATTACHARYYA\nIntersection block formula\nIntersection block formula\nKullback-Leibler divergence block formula\nKullback-Leibler divergence block formula\nbasically <em>21HT</em>, described in Yuen90\nbasically <em>21HT</em>, described in Yuen90\nvariation of HOUGH_GRADIENT to get better accuracy\nvariation of HOUGH_GRADIENT to get better accuracy\nmulti-scale variant of the classical Hough transform. The …\nmulti-scale variant of the classical Hough transform. The …\nprobabilistic Hough transform (more efficient in case if …\nprobabilistic Hough transform (more efficient in case if …\nclassical or standard Hough transform. Every line is …\nclassical or standard Hough transform. Every line is …\nOnly a subset of Hershey fonts …\nHistogram comparison methods @ingroup imgproc_hist\nVariants of a Hough transform\nOne of the rectangle is fully enclosed in the other\nOne of the rectangle is fully enclosed in the other\nNo intersection\nNo intersection\nThere is a partial intersection\nThere is a partial intersection\nresampling using pixel area relation. It may be a …\nresampling using pixel area relation. It may be a …\nbicubic interpolation\nbicubic interpolation\nLanczos interpolation over 8x8 neighborhood\nLanczos interpolation over 8x8 neighborhood\nbilinear interpolation\nbilinear interpolation\nBit exact bilinear interpolation\nBit exact bilinear interpolation\nmask for interpolation codes\nmask for interpolation codes\nnearest neighbor interpolation\nnearest neighbor interpolation\nBit exact nearest neighbor interpolation. This will …\nBit exact nearest neighbor interpolation. This will …\nIntelligent Scissors image segmentation\nMutable methods for crate::imgproc::IntelligentScissorsMB\nConstant methods for crate::imgproc::IntelligentScissorsMB\ninterpolation algorithm\n4-connected line\n4-connected line\n8-connected line\n8-connected line\nantialiased line\nantialiased line\nAdvanced refinement. Number of false alarms is calculated, …\nAdvanced refinement. Number of false alarms is calculated, …\nNo refinement applied\nNo refinement applied\nStandard refinement is applied. E.g. breaking arches into …\nStandard refinement is applied. E.g. breaking arches into …\nLine iterator\nMutable methods for crate::imgproc::LineIterator\nConstant methods for crate::imgproc::LineIterator\nLine segment detector class\nVariants of Line Segment %Detector\nMutable methods for crate::imgproc::LineSegmentDetector\nConstant methods for crate::imgproc::LineSegmentDetector\ntypes of line @ingroup imgproc_draw\nA crosshair marker shape\nA crosshair marker shape\nA diamond marker shape\nA diamond marker shape\nA square marker shape\nA square marker shape\nA star marker shape, combination of cross and tilted cross\nA star marker shape, combination of cross and tilted cross\nA 45 degree tilted crosshair marker shape\nA 45 degree tilted crosshair marker shape\nA downwards pointing triangle marker shape\nA downwards pointing triangle marker shape\nAn upwards pointing triangle marker shape\nAn upwards pointing triangle marker shape\n“black hat” block formula\n“black hat” block formula\na closing operation block formula\na closing operation block formula\na cross-shaped structuring element: block formula\na cross-shaped structuring element: block formula\nsee #dilate\nsee #dilate\nan elliptic structuring element, that is, a filled ellipse …\nan elliptic structuring element, that is, a filled ellipse …\nsee #erode\nsee #erode\na morphological gradient block formula\na morphological gradient block formula\n“hit or miss” .- Only supported for CV_8UC1 binary …\n“hit or miss” .- Only supported for CV_8UC1 binary …\nan opening operation block formula\nan opening operation block formula\na rectangular structuring element:  block formula\na rectangular structuring element:  block formula\n“top hat” block formula\n“top hat” block formula\nPossible set of marker types used for the cv::drawMarker …\nshape of the structuring element\ntype of morphological operation\nretrieves all of the contours and organizes them into a …\nretrieves all of the contours and organizes them into a …\nretrieves only the extreme outer contours. It sets …\nretrieves only the extreme outer contours. It sets …\nretrieves all of the contours without establishing any …\nretrieves all of the contours without establishing any …\nretrieves all of the contours and reconstructs a full …\nretrieves all of the contours and reconstructs a full …\ntypes of intersection between rectangles\nmode of the contour retrieval algorithm\nShape matching methods\nMutable methods for crate::imgproc::Subdiv2D\nConstant methods for crate::imgproc::Subdiv2D\nPoint location error\nPoint inside some facet\nPoint on some edge\nPoint outside the subdivision bounding rect\nPoint coincides with one of the subdivision vertices\nblock formula\nblock formula\nblock formula\nblock formula\nflag, use Otsu algorithm to choose the optimal threshold …\nflag, use Otsu algorithm to choose the optimal threshold …\nblock formula\nblock formula\nblock formula\nblock formula\nflag, use Triangle algorithm to choose the optimal …\nflag, use Triangle algorithm to choose the optimal …\nblock formula\nblock formula\n!&lt; block formula where block formula with mask: block …\n!&lt; block formula where block formula with mask: block …\n!&lt; block formula\n!&lt; block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\n!&lt; block formula with mask: block formula\ntype of the template matching operation\ntype of the threshold operation threshold types\nflag, fills all of the destination image pixels. If some …\nflag, fills all of the destination image pixels. If some …\nflag, inverse transformation\nflag, inverse transformation\nRemaps an image to/from polar space.\nRemaps an image to/from polar space.\nRemaps an image to/from semilog-polar space.\nRemaps an image to/from semilog-polar space.\n\\brief Specify the polar mapping mode\nAdds an image to the accumulator image.\nAdds an image to the accumulator image.\nAdds the per-element product of two input images to the …\nAdds the per-element product of two input images to the …\nAdds the square of a source image to the accumulator image.\nAdds the square of a source image to the accumulator image.\nUpdates a running average.\nUpdates a running average.\nApplies an adaptive threshold to an array.\nApplies a GNU Octave/MATLAB equivalent colormap on a given …\nApplies a user colormap on a given image.\nApproximates a polygonal curve(s) with the specified …\nCalculates a contour perimeter or a curve length.\nDraws an arrow segment pointing from the first point to …\nDraws an arrow segment pointing from the first point to …\nApplies the bilateral filter to an image.\nApplies the bilateral filter to an image.\nPerforms linear blending of two images: block formula\nBlurs an image using the normalized box filter.\nBlurs an image using the normalized box filter.\nCalculates the up-right bounding rectangle of a point set …\nBlurs an image using the box filter.\nBlurs an image using the box filter.\nFinds the four vertices of a rotated rect. Useful to draw …\nConstructs the Gaussian pyramid for an image.\nConstructs the Gaussian pyramid for an image.\nCalculates the back projection of a histogram.\nCalculates a histogram of a set of arrays.\n@overload\nFinds edges in an image using the Canny algorithm Canny86 .\nFinds edges in an image using the Canny algorithm Canny86 .\n\\overload\n\\overload\nDraws a circle.\nDraws a circle.\nClips the line against the image rectangle.\nClips the line against the image rectangle.\nClips the line against the image rectangle.\nCompares two histograms.\nCompares two histograms.\ncomputes the connected components labeled image of boolean …\n@overload\ncomputes the connected components labeled image of boolean …\ncomputes the connected components labeled image of boolean …\n@overload\ncomputes the connected components labeled image of boolean …\nCalculates a contour area.\nCalculates a contour area.\nConverts image transformation maps from one representation …\nConverts image transformation maps from one representation …\nFinds the convex hull of a point set.\nFinds the convex hull of a point set.\nFinds the convexity defects of a contour.\nCalculates eigenvalues and eigenvectors of image blocks …\nCalculates eigenvalues and eigenvectors of image blocks …\nHarris corner detector.\nHarris corner detector.\nCalculates the minimal eigenvalue of gradient matrices for …\nCalculates the minimal eigenvalue of gradient matrices for …\nRefines the corner locations.\nCreates a smart pointer to a cv::CLAHE class and …\nCreates a smart pointer to a cv::CLAHE class and …\nCreates a smart pointer to a cv::GeneralizedHoughBallard …\nCreates a smart pointer to a cv::GeneralizedHoughGuil …\nThis function computes a Hanning window coefficients in …\nCreates a smart pointer to a LineSegmentDetector object …\nCreates a smart pointer to a LineSegmentDetector object …\nConverts an image from one color space to another.\nConverts an image from one color space to another.\nConverts an image from one color space to another where …\nmain function for all demosaicing processes\nmain function for all demosaicing processes\nDilates an image by using a specific structuring element.\nDilates an image by using a specific structuring element.\nCalculates the distance to the closest zero pixel for each …\n@overload\nCalculates the distance to the closest zero pixel for each …\nCalculates the distance to the closest zero pixel for each …\nPerforms the per-element division of the first Fourier …\nPerforms the per-element division of the first Fourier …\nDraws contours outlines or filled contours.\nDraws contours outlines or filled contours.\nDraws a marker on a predefined position in an image.\nDraws a marker on a predefined position in an image.\nDraws a simple or thick elliptic arc or fills an ellipse …\nApproximates an elliptic arc with a polyline.\nApproximates an elliptic arc with a polyline.\nDraws a simple or thick elliptic arc or fills an ellipse …\nDraws a simple or thick elliptic arc or fills an ellipse …\n@overload\nComputes the “minimal work” distance between two …\nC++ default parameters\nNote\nComputes the “minimal work” distance between two …\nEqualizes the histogram of a grayscale image.\nErodes an image by using a specific structuring element.\nErodes an image by using a specific structuring element.\nFills a convex polygon.\nFills a convex polygon.\nFills the area bounded by one or more polygons.\nFills the area bounded by one or more polygons.\nConvolves an image with the kernel.\nConvolves an image with the kernel.\nFinds contours in a binary image.\n@overload\nFinds contours in a binary image.\nFinds contours in a binary image.\nFits an ellipse around a set of 2D points.\nFits an ellipse around a set of 2D points.\nFits an ellipse around a set of 2D points.\nFits a line to a 2D or 3D point set.\nFills a connected component with the given color.\n@overload\nFills a connected component with the given color.\nFills a connected component with the given color.\nBlurs an image using a Gaussian filter.\nBlurs an image using a Gaussian filter.\nCalculates an affine transform from three pairs of the …\nReturns filter coefficients for computing spatial image …\nReturns filter coefficients for computing spatial image …\nCalculates the font-specific size to use to achieve a …\nCalculates the font-specific size to use to achieve a …\nReturns Gabor filter coefficients.\nReturns Gabor filter coefficients.\nReturns Gaussian filter coefficients.\nReturns Gaussian filter coefficients.\nCalculates a perspective transform from four pairs of the …\nCalculates a perspective transform from four pairs of the …\nCalculates a perspective transform from four pairs of the …\n@overload\nRetrieves a pixel rectangle from an image with sub-pixel …\nRetrieves a pixel rectangle from an image with sub-pixel …\nCalculates an affine matrix of 2D rotation.\nSee also\nReturns a structuring element of the specified size and …\nReturns a structuring element of the specified size and …\nCalculates the width and height of a text string.\nDetermines strong corners on an image.\nDetermines strong corners on an image.\nC++ default parameters\nNote\nSame as above, but returns also quality measure of the …\nSame as above, but returns also quality measure of the …\nRuns the GrabCut algorithm.\nRuns the GrabCut algorithm.\nFinds circles in a grayscale image using the Hough …\nFinds circles in a grayscale image using the Hough …\nFinds lines in a binary image using the standard Hough …\nFinds lines in a binary image using the standard Hough …\nFinds line segments in a binary image using the …\nFinds line segments in a binary image using the …\nFinds lines in a set of points using the standard Hough …\nCalculates seven Hu invariants.\nCalculates seven Hu invariants.\nCalculates the integral of an image.\nCalculates the integral of an image.\n@overload\nCalculates the integral of an image.\nCalculates the integral of an image.\n@overload\nFinds intersection of two convex polygons\nFinds intersection of two convex polygons\nInverts an affine transformation.\nTests a contour convexity.\nCalculates the Laplacian of an image.\nCalculates the Laplacian of an image.\nDraws a line segment connecting two points.\nDraws a line segment connecting two points.\nRemaps an image to polar coordinates space.\nRemaps an image to semilog-polar coordinates space.\nCompares two shapes.\nCompares a template against overlapped image regions.\nCompares a template against overlapped image regions.\nBlurs an image using the median filter.\nFinds a rotated rectangle of the minimum area enclosing …\nFinds a circle of the minimum area enclosing a 2D point …\nFinds a triangle of minimum area enclosing a 2D point set …\nCalculates all of the moments up to the third order of a …\nCalculates all of the moments up to the third order of a …\nreturns “magic” border value for erosion and dilation. …\nPerforms advanced morphological transformations.\nPerforms advanced morphological transformations.\nThe function is used to detect translational shifts that …\nThe function is used to detect translational shifts that …\nPerforms a point-in-contour test.\nDraws several polygonal curves.\nDraws several polygonal curves.\nCalculates a feature map for corner detection.\nCalculates a feature map for corner detection.\nDraws a text string.\nDraws a text string.\nBlurs an image and downsamples it.\nBlurs an image and downsamples it.\nPerforms initial step of meanshift segmentation of an …\nPerforms initial step of meanshift segmentation of an …\nUpsamples an image and then blurs it.\nUpsamples an image and then blurs it.\nDraws a simple, thick, or filled up-right rectangle.\n@overload\nDraws a simple, thick, or filled up-right rectangle.\nDraws a simple, thick, or filled up-right rectangle.\nApplies a generic geometrical transformation to an image.\nApplies a generic geometrical transformation to an image.\nResizes an image.\nResizes an image.\nFinds out if there is any intersection between two rotated …\nCalculates the first x- or y- image derivative using …\nCalculates the first x- or y- image derivative using …\nApplies a separable linear filter to an image.\nApplies a separable linear filter to an image.\nCalculates the first, second, third, or mixed image …\nCalculates the first, second, third, or mixed image …\nCalculates the first order image derivative in both x and …\nCalculates the first order image derivative in both x and …\nCalculates the normalized sum of squares of the pixel …\nCalculates the normalized sum of squares of the pixel …\nApplies a fixed-level threshold to each array element.\nApplies an affine transformation to an image.\nApplies an affine transformation to an image.\nApplies a perspective transformation to an image.\nApplies a perspective transformation to an image.\n\\brief Remaps an image to polar or semilog-polar …\nPerforms a marker-based image segmentation using the …\nMutable methods for crate::imgproc::CLAHE\nConstant methods for crate::imgproc::CLAHE\nMutable methods for crate::imgproc::GeneralizedHoughBallard\nConstant methods for …\nMutable methods for crate::imgproc::GeneralizedHoughGuil\nConstant methods for crate::imgproc::GeneralizedHoughGuil\nMutable methods for crate::imgproc::GeneralizedHough\nConstant methods for crate::imgproc::GeneralizedHough\nMutable methods for crate::imgproc::IntelligentScissorsMB\nConstant methods for crate::imgproc::IntelligentScissorsMB\nMutable methods for crate::imgproc::LineIterator\nConstant methods for crate::imgproc::LineIterator\nMutable methods for crate::imgproc::LineSegmentDetector\nConstant methods for crate::imgproc::LineSegmentDetector\nMutable methods for crate::imgproc::Subdiv2D\nConstant methods for crate::imgproc::Subdiv2D\ndocs.opencv.org\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplement this trait types that are valid to use as Mat …\nAmount of layers/channels per element. E.g. for an 8-bit …\nThe shape of bytes occupied by the single layer/channel of …\nOpenCV value for this type as produced by <code>CV_MAKETYPE()</code> …\nOpenCV value for this type as produced by <code>CV_MAKETYPE()</code> …\nOpenCV value for this type as produced by <code>CV_MAKETYPE()</code> …\nHelper function to call OpenCV functions that allow …\nTrait to serve as a replacement for <code>InputArray</code> in C++ …\nTrait to serve as a replacement for <code>InputOutputArray</code> in …\nTrait to serve as a replacement for <code>OutputArray</code> in C++ …\nLike <code>Mat::at_2d()</code> but performs no bounds or type checks\nLike <code>Mat::at_2d()</code> but performs no bounds or type checks\nLike <code>Mat::at_2d()</code> but performs no bounds or type checks\nLike <code>Mat::at_2d_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_2d_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_2d_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_3d()</code> but performs no bounds or type checks\nLike <code>Mat::at_3d()</code> but performs no bounds or type checks\nLike <code>Mat::at_3d()</code> but performs no bounds or type checks\nLike <code>Mat::at_3d_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_3d_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_3d_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_nd()</code> but performs no bounds or type checks\nLike <code>Mat::at_nd()</code> but performs no bounds or type checks\nLike <code>Mat::at_nd()</code> but performs no bounds or type checks\nLike <code>Mat::at_nd_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_nd_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_nd_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_pt()</code> but performs no bounds or type checks\nLike <code>Mat::at_pt()</code> but performs no bounds or type checks\nLike <code>Mat::at_pt()</code> but performs no bounds or type checks\nLike <code>Mat::at_pt_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_pt_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_pt_mut()</code> but performs no bounds or type checks\nReturn a complete read-only row\nReturn a complete read-only row\nReturn a complete read-only row\nReturn a complete writeable row\nReturn a complete writeable row\nReturn a complete writeable row\nLike <code>Mat::at_row()</code> but performs no bounds or type checks\nLike <code>Mat::at_row()</code> but performs no bounds or type checks\nLike <code>Mat::at_row()</code> but performs no bounds or type checks\nLike <code>Mat::at_row_mut()</code> but performs no bounds or type …\nLike <code>Mat::at_row_mut()</code> but performs no bounds or type …\nLike <code>Mat::at_row_mut()</code> but performs no bounds or type …\nLike <code>Mat::at()</code> but performs no bounds or type checks\nLike <code>Mat::at()</code> but performs no bounds or type checks\nLike <code>Mat::at()</code> but performs no bounds or type checks\nLike <code>Mat::at_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_mut()</code> but performs no bounds or type checks\nLike <code>Mat::at_mut()</code> but performs no bounds or type checks\nWe rely on OpenCV to make sure that the pointer is …\nWe rely on OpenCV to make sure that the pointer is …\nReturns underlying data array as byte slice, <code>Mat</code> must be …\nReturns underlying data array as byte slice, <code>Mat</code> must be …\nReturns underlying data array as byte slice, <code>Mat</code> must be …\nReturns underlying data array as mutable byte slice, Mat …\nReturns underlying data array as mutable byte slice, Mat …\nReturns underlying data array as mutable byte slice, Mat …\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over <code>Mat</code> elements and their positions\nReturns an iterator over <code>Mat</code> elements and their positions\nReturns an iterator over <code>Mat</code> elements and their positions\nReturns a mutable iterator over <code>Mat</code> elements and their …\nReturns a mutable iterator over <code>Mat</code> elements and their …\nReturns a mutable iterator over <code>Mat</code> elements and their …\ndocs.opencv.org\nSee Mat::at\nSee Mat::at_2d\nSee Mat::at_2d_mut\nSee Mat::at_3d\nSee Mat::at_3d_mut\nSee Mat::at_mut\nSee Mat::at_nd\nSee Mat::at_nd_mut\nSee Mat::at_pt\nSee Mat::at_pt_mut\nSee [Mat::data_typed]\nSee [Mat::data_typed_mut]\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nElementwise multiplication\nIntermediate result type that’s produced by the Mat …\nHints Rust about whether we need a borrow or a move for an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ndocs.opencv.org\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nCalls <code>U::from(self)</code>.\ndocs.opencv.org\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCast <code>Point</code> to the other coord type\ndocs.opencv.org\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCast <code>Point3</code> to the other coord type\nThis is similar to Rust <code>Arc</code>, but handled by the C++. Some …\nReturns the argument unchanged.\nGet raw pointer to the inner object\nGet mutable raw pointer to the inner object\nCalls <code>U::from(self)</code>.\nCreate a new <code>Ptr</code> from the object\ndocs.opencv.org\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCast <code>Rect</code> to the other coord and size type\ndocs.opencv.org\nreturns true iff v1 == v2 == v3 == 0\ndocs.opencv.org\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCast <code>Size</code> to the other coord type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper for C++ std::tupe and std::pair\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert into a Rust tuple\nConvert into a Rust tuple\nCreate new from a Rust tuple\nCreate new from a Rust tuple\ndocs.opencv.org Named <code>VecN</code> to avoid name clash with std’…\nconjugation (makes sense for complex numbers and …\nconjugation (makes sense for complex numbers and …\ncross product of the two 3D vectors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nreturns true iff v1 == v2 == v3 == 0\nper-element multiplication\nCast <code>VecN</code> to the other element type\nWrapper for C++ std::vector\nReturn mutable slice to the elements of the array.\nTransmutes a <code>&amp;Vector&lt;BoxedRef&lt;T&gt;&gt;</code> into a <code>&amp;Vector&lt;T&gt;</code>. This …\nReturn slice to the elements of the array.\nReturn Vector current capacity\nRemove all elements\nReturns the argument unchanged.\nCreate a Vector from iterator\nCreate a Vector from slice, the element type needs to be …\nGet element at the specified <code>index</code>\nSame as <code>get()</code> but without bounds checking\nInsert a new element at the specified <code>index</code>\nCalls <code>U::from(self)</code>.\nReturn true if Vector is empty\nReturn Vector length\nCreate a new Vector\nAdd new element\nRemove the element at the specified <code>index</code>\nReserve capacity for <code>additional</code> new elements\nSet element at the specified <code>index</code>\nSame as <code>set()</code> but without bounds checking\nFree extra capacity\nSwap 2 elements in the Vector\nConvert <code>Vector</code> to <code>Vec</code>\nCreate a Vector with pre-defined capacity\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCore functionality\nDeep Neural Network module\nImage file reading and writing\nImage Processing\nVideo I/O\nvalue, open the file for appending\nThe buffer will be used as a source for vertex data\nThis is a base class for all more or less complex …\nMutable methods for core::Algorithm\nConstant methods for core::Algorithm\nWrapper for OpenGL Client-Side Vertex arrays.\nMutable methods for core::Arrays\nConstant methods for core::Arrays\nReturns result of asynchronous operations\nMutable methods for core::AsyncArray\nConstant methods for core::AsyncArray\nProvides result of asynchronous operations\nMutable methods for core::AsyncPromise\nConstant methods for core::AsyncPromise\nflag, write rawdata in Base64 by default. (consider using …\n&lt; Event uses blocking synchronization\n<code>iiiiii|abcdefgh|iiiiiii</code>  with some specified <code>i</code>\n<code>iiiiii|abcdefgh|iiiiiii</code>  with some specified <code>i</code>\nsame as BORDER_REFLECT_101\ndo not look outside of ROI\ndo not look outside of ROI\n<code>fedcba|abcdefgh|hgfedcb</code>\n<code>fedcba|abcdefgh|hgfedcb</code>\nsame as BORDER_REFLECT_101\n<code>gfedcb|abcdefgh|gfedcba</code>\n<code>gfedcb|abcdefgh|gfedcba</code>\n<code>aaaaaa|abcdefgh|hhhhhhh</code>\n<code>aaaaaa|abcdefgh|hhhhhhh</code>\n<code>uvwxyz|abcdefgh|ijklmno</code>\n<code>uvwxyz|abcdefgh|ijklmno</code>\n<code>cdefgh|abcdefgh|abcdefg</code>\n<code>cdefgh|abcdefgh|abcdefg</code>\nincorrect input align\nincorrect input align\ninput COI is not supported\ninput COI is not supported\ninput image depth is not supported by the function\ninput image depth is not supported by the function\nimage size is invalid\nimage size is invalid\nbad number of channels, for example, some functions accept …\nbad number of channels, for example, some functions accept …\noffset is invalid\noffset is invalid\nnumber of dimensions is out of range\nnumber of dimensions is out of range\nincorrect input origin\nincorrect input origin\nincorrect input roi\nincorrect input roi\nimage step is wrong, this may happen for a non-continuous …\nimage step is wrong, this may happen for a non-continuous …\nVarious border types, image boundaries are denoted with <code>|</code>\nSmart pointer for OpenGL buffer object with reference …\nBufferPool for use with CUDA streams\nMutable methods for core::BufferPool\nConstant methods for core::BufferPool\nMutable methods for core::Buffer\nConstant methods for core::Buffer\nThe buffer will be used as a source for vertex data\nThe buffer will be used for indices (in glDrawElements, …\nThe buffer will be used for reading from OpenGL textures\nThe buffer will be used for writing to OpenGL textures\nThe target defines how you intend to use the buffer object.\nsrc1 is equal to src2.\nsrc1 is equal to src2.\nsrc1 is greater than or equal to src2.\nsrc1 is greater than or equal to src2.\nsrc1 is greater than src2.\nsrc1 is greater than src2.\nsrc1 is less than or equal to src2.\nsrc1 is less than or equal to src2.\nsrc1 is less than src2.\nsrc1 is less than src2.\nsrc1 is unequal to src2.\nsrc1 is unequal to src2.\nthe maximum number of iterations or elements to compute\nIf the flag is specified, all the input vectors are stored …\nIf the flag is specified, all the input vectors are stored …\nThe output covariance matrix is calculated as: block …\nThe output covariance matrix is calculated as: block …\nIf the flag is specified, all the input vectors are stored …\nIf the flag is specified, all the input vectors are stored …\nIf the flag is specified, the covariance matrix is scaled. …\nIf the flag is specified, the covariance matrix is scaled. …\nThe output covariance matrix is calculated as: block …\nThe output covariance matrix is calculated as: block …\nIf the flag is specified, the function does not calculate …\nIf the flag is specified, the function does not calculate …\nCascade Lake with AVX-512F/CD/BW/DQ/VL/VNNI\nCascade Lake with AVX-512F/CD/BW/DQ/VL/VNNI\nCannon Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI\nCannon Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI\nCommon instructions AVX-512F/CD for all CPUs that support …\nCommon instructions AVX-512F/CD for all CPUs that support …\nIce Lake with …\nIce Lake with …\nKnights Landing with AVX-512F/CD/ER/PF\nKnights Landing with AVX-512F/CD/ER/PF\nKnights Mill with AVX-512F/CD/ER/PF/4FMAPS/4VNNIW/VPOPCNTDQ\nKnights Mill with AVX-512F/CD/ER/PF/4FMAPS/4VNNIW/VPOPCNTDQ\nSkylake-X with AVX-512F/CD/BW/DQ/VL\nSkylake-X with AVX-512F/CD/BW/DQ/VL\ncomparison types\nerror codes\nDesigned for command line parsing\nMutable methods for core::CommandLineParser\nConstant methods for core::CommandLineParser\n&lt; default compute mode (Multiple threads can use …\n&lt; compute-exclusive-thread mode (Only one thread in one …\n&lt; compute-exclusive-process mode (Many threads in one …\n&lt; compute-prohibited mode (No threads can use …\nThis class is used to perform the non-linear …\nMutable methods for core::ConjGradSolver\nConstant methods for core::ConjGradSolver\nMutable methods for core::Context\nConstant methods for core::Context\nMutable methods for core::Context_UserContext\nConstant methods for core::Context_UserContext\nCovariation flags\nAvailable CPU features.\nindicates that the input samples are stored as matrix …\nindicates that the input samples are stored as matrix rows\nperforms an inverse 1D or 2D transform instead of the …\nperforms a forward or inverse transform of every …\nCholesky inline formula factorization; the matrix src1 …\nCholesky inline formula factorization; the matrix src1 …\neigenvalue decomposition; the matrix src1 must be …\neigenvalue decomposition; the matrix src1 must be …\nGaussian elimination with the optimal pivot element chosen.\nGaussian elimination with the optimal pivot element chosen.\nwhile all the previous flags are mutually exclusive, this …\nwhile all the previous flags are mutually exclusive, this …\nQR factorization; the system can be over-defined and/or …\nQR factorization; the system can be over-defined and/or …\nsingular value decomposition (SVD) method; the system can …\nsingular value decomposition (SVD) method; the system can …\n&lt; Default event flag\nDepth\nspecifies that input is complex input. If this flag is …\nspecifies that input is complex input. If this flag is …\nperforms a forward transformation of 1D or 2D real array; …\nperforms a forward transformation of 1D or 2D real array; …\nperforms an inverse 1D or 2D transform instead of the …\nperforms an inverse 1D or 2D transform instead of the …\nperforms an inverse transformation of a 1D or 2D complex …\nperforms an inverse transformation of a 1D or 2D complex …\nperforms a forward or inverse transform of every …\nperforms a forward or inverse transform of every …\nscales the result: divide it by the number of array …\nscales the result: divide it by the number of array …\n&lt; Event will not record timing data\nClass for matching keypoint descriptors\nmatrix decomposition types\nMutable methods for core::Detail_CheckContext\nConstant methods for core::Detail_CheckContext\nClass providing functionality for querying the specified …\nMutable methods for core::DeviceInfo\nConstant methods for core::DeviceInfo\n&lt; default compute mode (Multiple threads can use …\n&lt; compute-exclusive-thread mode (Only one thread in one …\n&lt; compute-exclusive-process mode (Many threads in one …\n&lt; compute-prohibited mode (No threads can use …\nMutable methods for core::Device\nConstant methods for core::Device\nThis class is used to perform the non-linear …\nMutable methods for core::DownhillSolver\nConstant methods for core::DownhillSolver\nThe buffer will be used for indices (in glDrawElements, …\nthe desired accuracy or change in parameters at which the …\nremoved: https://github.com/opencv/opencv/pull/17046\nMutable methods for core::Event\nConstant methods for core::Event\n&lt; Event uses blocking synchronization\n&lt; Default event flag\n&lt; Event will not record timing data\n&lt; Event is suitable for interprocess use. DisableTiming …\n! Class passed to an error.\nMutable methods for core::Exception\nConstant methods for core::Exception\nflag, JSON format\nmask for format flags\nflag, XML format\nflag, YAML format\nwhen the matrix is not square, by default the algorithm …\nEnumeration providing CUDA computing features.\nFile Storage Node class.\nused to iterate through sequences and mappings.\nMutable methods for core::FileNodeIterator\nConstant methods for core::FileNodeIterator\nMutable methods for core::FileNode")